/*
 * Copyright (C) 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.bmarwell.jtop.lib.osx.ffm; // Generated by jextract

import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.AddressLayout;

public class proc_info_h_1 extends proc_info_h_2 {

    proc_info_h_1() {
        // Should not be called directly
    }

    private static final int KEV_INET_SIFNETMASK = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET_SIFNETMASK 6
     * }
     */
    public static int KEV_INET_SIFNETMASK() {
        return KEV_INET_SIFNETMASK;
    }

    private static final int KEV_INET_ARPCOLLISION = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET_ARPCOLLISION 7
     * }
     */
    public static int KEV_INET_ARPCOLLISION() {
        return KEV_INET_ARPCOLLISION;
    }

    private static final int KEV_INET_PORTINUSE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET_PORTINUSE 8
     * }
     */
    public static int KEV_INET_PORTINUSE() {
        return KEV_INET_PORTINUSE;
    }

    private static final int KEV_INET_ARPRTRFAILURE = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET_ARPRTRFAILURE 9
     * }
     */
    public static int KEV_INET_ARPRTRFAILURE() {
        return KEV_INET_ARPRTRFAILURE;
    }

    private static final int KEV_INET_ARPRTRALIVE = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET_ARPRTRALIVE 10
     * }
     */
    public static int KEV_INET_ARPRTRALIVE() {
        return KEV_INET_ARPRTRALIVE;
    }

    private static final int KEV_DL_SUBCLASS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SUBCLASS 2
     * }
     */
    public static int KEV_DL_SUBCLASS() {
        return KEV_DL_SUBCLASS;
    }

    private static final int KEV_DL_SIFFLAGS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFFLAGS 1
     * }
     */
    public static int KEV_DL_SIFFLAGS() {
        return KEV_DL_SIFFLAGS;
    }

    private static final int KEV_DL_SIFMETRICS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFMETRICS 2
     * }
     */
    public static int KEV_DL_SIFMETRICS() {
        return KEV_DL_SIFMETRICS;
    }

    private static final int KEV_DL_SIFMTU = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFMTU 3
     * }
     */
    public static int KEV_DL_SIFMTU() {
        return KEV_DL_SIFMTU;
    }

    private static final int KEV_DL_SIFPHYS = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFPHYS 4
     * }
     */
    public static int KEV_DL_SIFPHYS() {
        return KEV_DL_SIFPHYS;
    }

    private static final int KEV_DL_SIFMEDIA = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFMEDIA 5
     * }
     */
    public static int KEV_DL_SIFMEDIA() {
        return KEV_DL_SIFMEDIA;
    }

    private static final int KEV_DL_SIFGENERIC = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_SIFGENERIC 6
     * }
     */
    public static int KEV_DL_SIFGENERIC() {
        return KEV_DL_SIFGENERIC;
    }

    private static final int KEV_DL_ADDMULTI = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_ADDMULTI 7
     * }
     */
    public static int KEV_DL_ADDMULTI() {
        return KEV_DL_ADDMULTI;
    }

    private static final int KEV_DL_DELMULTI = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_DELMULTI 8
     * }
     */
    public static int KEV_DL_DELMULTI() {
        return KEV_DL_DELMULTI;
    }

    private static final int KEV_DL_IF_ATTACHED = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IF_ATTACHED 9
     * }
     */
    public static int KEV_DL_IF_ATTACHED() {
        return KEV_DL_IF_ATTACHED;
    }

    private static final int KEV_DL_IF_DETACHING = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IF_DETACHING 10
     * }
     */
    public static int KEV_DL_IF_DETACHING() {
        return KEV_DL_IF_DETACHING;
    }

    private static final int KEV_DL_IF_DETACHED = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IF_DETACHED 11
     * }
     */
    public static int KEV_DL_IF_DETACHED() {
        return KEV_DL_IF_DETACHED;
    }

    private static final int KEV_DL_LINK_OFF = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_LINK_OFF 12
     * }
     */
    public static int KEV_DL_LINK_OFF() {
        return KEV_DL_LINK_OFF;
    }

    private static final int KEV_DL_LINK_ON = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_LINK_ON 13
     * }
     */
    public static int KEV_DL_LINK_ON() {
        return KEV_DL_LINK_ON;
    }

    private static final int KEV_DL_PROTO_ATTACHED = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_PROTO_ATTACHED 14
     * }
     */
    public static int KEV_DL_PROTO_ATTACHED() {
        return KEV_DL_PROTO_ATTACHED;
    }

    private static final int KEV_DL_PROTO_DETACHED = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_PROTO_DETACHED 15
     * }
     */
    public static int KEV_DL_PROTO_DETACHED() {
        return KEV_DL_PROTO_DETACHED;
    }

    private static final int KEV_DL_LINK_ADDRESS_CHANGED = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_LINK_ADDRESS_CHANGED 16
     * }
     */
    public static int KEV_DL_LINK_ADDRESS_CHANGED() {
        return KEV_DL_LINK_ADDRESS_CHANGED;
    }

    private static final int KEV_DL_WAKEFLAGS_CHANGED = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_WAKEFLAGS_CHANGED 17
     * }
     */
    public static int KEV_DL_WAKEFLAGS_CHANGED() {
        return KEV_DL_WAKEFLAGS_CHANGED;
    }

    private static final int KEV_DL_IF_IDLE_ROUTE_REFCNT = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IF_IDLE_ROUTE_REFCNT 18
     * }
     */
    public static int KEV_DL_IF_IDLE_ROUTE_REFCNT() {
        return KEV_DL_IF_IDLE_ROUTE_REFCNT;
    }

    private static final int KEV_DL_IFCAP_CHANGED = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IFCAP_CHANGED 19
     * }
     */
    public static int KEV_DL_IFCAP_CHANGED() {
        return KEV_DL_IFCAP_CHANGED;
    }

    private static final int KEV_DL_LINK_QUALITY_METRIC_CHANGED = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_LINK_QUALITY_METRIC_CHANGED 20
     * }
     */
    public static int KEV_DL_LINK_QUALITY_METRIC_CHANGED() {
        return KEV_DL_LINK_QUALITY_METRIC_CHANGED;
    }

    private static final int KEV_DL_NODE_PRESENCE = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_NODE_PRESENCE 21
     * }
     */
    public static int KEV_DL_NODE_PRESENCE() {
        return KEV_DL_NODE_PRESENCE;
    }

    private static final int KEV_DL_NODE_ABSENCE = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_NODE_ABSENCE 22
     * }
     */
    public static int KEV_DL_NODE_ABSENCE() {
        return KEV_DL_NODE_ABSENCE;
    }

    private static final int KEV_DL_PRIMARY_ELECTED = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_PRIMARY_ELECTED 23
     * }
     */
    public static int KEV_DL_PRIMARY_ELECTED() {
        return KEV_DL_PRIMARY_ELECTED;
    }

    private static final int KEV_DL_ISSUES = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_ISSUES 24
     * }
     */
    public static int KEV_DL_ISSUES() {
        return KEV_DL_ISSUES;
    }

    private static final int KEV_DL_IFDELEGATE_CHANGED = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_IFDELEGATE_CHANGED 25
     * }
     */
    public static int KEV_DL_IFDELEGATE_CHANGED() {
        return KEV_DL_IFDELEGATE_CHANGED;
    }

    private static final int KEV_DL_AWDL_RESTRICTED = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_AWDL_RESTRICTED 26
     * }
     */
    public static int KEV_DL_AWDL_RESTRICTED() {
        return KEV_DL_AWDL_RESTRICTED;
    }

    private static final int KEV_DL_AWDL_UNRESTRICTED = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_AWDL_UNRESTRICTED 27
     * }
     */
    public static int KEV_DL_AWDL_UNRESTRICTED() {
        return KEV_DL_AWDL_UNRESTRICTED;
    }

    private static final int KEV_DL_RRC_STATE_CHANGED = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_RRC_STATE_CHANGED 28
     * }
     */
    public static int KEV_DL_RRC_STATE_CHANGED() {
        return KEV_DL_RRC_STATE_CHANGED;
    }

    private static final int KEV_DL_QOS_MODE_CHANGED = (int) 29L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_QOS_MODE_CHANGED 29
     * }
     */
    public static int KEV_DL_QOS_MODE_CHANGED() {
        return KEV_DL_QOS_MODE_CHANGED;
    }

    private static final int KEV_DL_LOW_POWER_MODE_CHANGED = (int) 30L;
    /**
     * {@snippet lang=c :
     * #define KEV_DL_LOW_POWER_MODE_CHANGED 30
     * }
     */
    public static int KEV_DL_LOW_POWER_MODE_CHANGED() {
        return KEV_DL_LOW_POWER_MODE_CHANGED;
    }

    private static final int KEV_INET6_SUBCLASS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_SUBCLASS 6
     * }
     */
    public static int KEV_INET6_SUBCLASS() {
        return KEV_INET6_SUBCLASS;
    }

    private static final int KEV_INET6_NEW_USER_ADDR = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_NEW_USER_ADDR 1
     * }
     */
    public static int KEV_INET6_NEW_USER_ADDR() {
        return KEV_INET6_NEW_USER_ADDR;
    }

    private static final int KEV_INET6_CHANGED_ADDR = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_CHANGED_ADDR 2
     * }
     */
    public static int KEV_INET6_CHANGED_ADDR() {
        return KEV_INET6_CHANGED_ADDR;
    }

    private static final int KEV_INET6_ADDR_DELETED = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_ADDR_DELETED 3
     * }
     */
    public static int KEV_INET6_ADDR_DELETED() {
        return KEV_INET6_ADDR_DELETED;
    }

    private static final int KEV_INET6_NEW_LL_ADDR = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_NEW_LL_ADDR 4
     * }
     */
    public static int KEV_INET6_NEW_LL_ADDR() {
        return KEV_INET6_NEW_LL_ADDR;
    }

    private static final int KEV_INET6_NEW_RTADV_ADDR = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_NEW_RTADV_ADDR 5
     * }
     */
    public static int KEV_INET6_NEW_RTADV_ADDR() {
        return KEV_INET6_NEW_RTADV_ADDR;
    }

    private static final int KEV_INET6_DEFROUTER = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_DEFROUTER 6
     * }
     */
    public static int KEV_INET6_DEFROUTER() {
        return KEV_INET6_DEFROUTER;
    }

    private static final int KEV_INET6_REQUEST_NAT64_PREFIX = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define KEV_INET6_REQUEST_NAT64_PREFIX 7
     * }
     */
    public static int KEV_INET6_REQUEST_NAT64_PREFIX() {
        return KEV_INET6_REQUEST_NAT64_PREFIX;
    }

    private static final int SOCK_STREAM = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SOCK_STREAM 1
     * }
     */
    public static int SOCK_STREAM() {
        return SOCK_STREAM;
    }

    private static final int SOCK_DGRAM = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SOCK_DGRAM 2
     * }
     */
    public static int SOCK_DGRAM() {
        return SOCK_DGRAM;
    }

    private static final int SOCK_RAW = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define SOCK_RAW 3
     * }
     */
    public static int SOCK_RAW() {
        return SOCK_RAW;
    }

    private static final int SOCK_RDM = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define SOCK_RDM 4
     * }
     */
    public static int SOCK_RDM() {
        return SOCK_RDM;
    }

    private static final int SOCK_SEQPACKET = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define SOCK_SEQPACKET 5
     * }
     */
    public static int SOCK_SEQPACKET() {
        return SOCK_SEQPACKET;
    }

    private static final int SO_DEBUG = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SO_DEBUG 1
     * }
     */
    public static int SO_DEBUG() {
        return SO_DEBUG;
    }

    private static final int SO_ACCEPTCONN = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SO_ACCEPTCONN 2
     * }
     */
    public static int SO_ACCEPTCONN() {
        return SO_ACCEPTCONN;
    }

    private static final int SO_REUSEADDR = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSEADDR 4
     * }
     */
    public static int SO_REUSEADDR() {
        return SO_REUSEADDR;
    }

    private static final int SO_KEEPALIVE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define SO_KEEPALIVE 8
     * }
     */
    public static int SO_KEEPALIVE() {
        return SO_KEEPALIVE;
    }

    private static final int SO_DONTROUTE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define SO_DONTROUTE 16
     * }
     */
    public static int SO_DONTROUTE() {
        return SO_DONTROUTE;
    }

    private static final int SO_BROADCAST = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define SO_BROADCAST 32
     * }
     */
    public static int SO_BROADCAST() {
        return SO_BROADCAST;
    }

    private static final int SO_USELOOPBACK = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define SO_USELOOPBACK 64
     * }
     */
    public static int SO_USELOOPBACK() {
        return SO_USELOOPBACK;
    }

    private static final int SO_LINGER = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define SO_LINGER 128
     * }
     */
    public static int SO_LINGER() {
        return SO_LINGER;
    }

    private static final int SO_LINGER_SEC = (int) 4224L;
    /**
     * {@snippet lang=c :
     * #define SO_LINGER_SEC 4224
     * }
     */
    public static int SO_LINGER_SEC() {
        return SO_LINGER_SEC;
    }

    private static final int SO_OOBINLINE = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define SO_OOBINLINE 256
     * }
     */
    public static int SO_OOBINLINE() {
        return SO_OOBINLINE;
    }

    private static final int SO_REUSEPORT = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSEPORT 512
     * }
     */
    public static int SO_REUSEPORT() {
        return SO_REUSEPORT;
    }

    private static final int SO_TIMESTAMP = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP 1024
     * }
     */
    public static int SO_TIMESTAMP() {
        return SO_TIMESTAMP;
    }

    private static final int SO_TIMESTAMP_MONOTONIC = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP_MONOTONIC 2048
     * }
     */
    public static int SO_TIMESTAMP_MONOTONIC() {
        return SO_TIMESTAMP_MONOTONIC;
    }

    private static final int SO_DONTTRUNC = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define SO_DONTTRUNC 8192
     * }
     */
    public static int SO_DONTTRUNC() {
        return SO_DONTTRUNC;
    }

    private static final int SO_WANTMORE = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define SO_WANTMORE 16384
     * }
     */
    public static int SO_WANTMORE() {
        return SO_WANTMORE;
    }

    private static final int SO_WANTOOBFLAG = (int) 32768L;
    /**
     * {@snippet lang=c :
     * #define SO_WANTOOBFLAG 32768
     * }
     */
    public static int SO_WANTOOBFLAG() {
        return SO_WANTOOBFLAG;
    }

    private static final int SO_SNDBUF = (int) 4097L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDBUF 4097
     * }
     */
    public static int SO_SNDBUF() {
        return SO_SNDBUF;
    }

    private static final int SO_RCVBUF = (int) 4098L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVBUF 4098
     * }
     */
    public static int SO_RCVBUF() {
        return SO_RCVBUF;
    }

    private static final int SO_SNDLOWAT = (int) 4099L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDLOWAT 4099
     * }
     */
    public static int SO_SNDLOWAT() {
        return SO_SNDLOWAT;
    }

    private static final int SO_RCVLOWAT = (int) 4100L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVLOWAT 4100
     * }
     */
    public static int SO_RCVLOWAT() {
        return SO_RCVLOWAT;
    }

    private static final int SO_SNDTIMEO = (int) 4101L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO 4101
     * }
     */
    public static int SO_SNDTIMEO() {
        return SO_SNDTIMEO;
    }

    private static final int SO_RCVTIMEO = (int) 4102L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO 4102
     * }
     */
    public static int SO_RCVTIMEO() {
        return SO_RCVTIMEO;
    }

    private static final int SO_ERROR = (int) 4103L;
    /**
     * {@snippet lang=c :
     * #define SO_ERROR 4103
     * }
     */
    public static int SO_ERROR() {
        return SO_ERROR;
    }

    private static final int SO_TYPE = (int) 4104L;
    /**
     * {@snippet lang=c :
     * #define SO_TYPE 4104
     * }
     */
    public static int SO_TYPE() {
        return SO_TYPE;
    }

    private static final int SO_LABEL = (int) 4112L;
    /**
     * {@snippet lang=c :
     * #define SO_LABEL 4112
     * }
     */
    public static int SO_LABEL() {
        return SO_LABEL;
    }

    private static final int SO_PEERLABEL = (int) 4113L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERLABEL 4113
     * }
     */
    public static int SO_PEERLABEL() {
        return SO_PEERLABEL;
    }

    private static final int SO_NREAD = (int) 4128L;
    /**
     * {@snippet lang=c :
     * #define SO_NREAD 4128
     * }
     */
    public static int SO_NREAD() {
        return SO_NREAD;
    }

    private static final int SO_NKE = (int) 4129L;
    /**
     * {@snippet lang=c :
     * #define SO_NKE 4129
     * }
     */
    public static int SO_NKE() {
        return SO_NKE;
    }

    private static final int SO_NOSIGPIPE = (int) 4130L;
    /**
     * {@snippet lang=c :
     * #define SO_NOSIGPIPE 4130
     * }
     */
    public static int SO_NOSIGPIPE() {
        return SO_NOSIGPIPE;
    }

    private static final int SO_NOADDRERR = (int) 4131L;
    /**
     * {@snippet lang=c :
     * #define SO_NOADDRERR 4131
     * }
     */
    public static int SO_NOADDRERR() {
        return SO_NOADDRERR;
    }

    private static final int SO_NWRITE = (int) 4132L;
    /**
     * {@snippet lang=c :
     * #define SO_NWRITE 4132
     * }
     */
    public static int SO_NWRITE() {
        return SO_NWRITE;
    }

    private static final int SO_REUSESHAREUID = (int) 4133L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSESHAREUID 4133
     * }
     */
    public static int SO_REUSESHAREUID() {
        return SO_REUSESHAREUID;
    }

    private static final int SO_NOTIFYCONFLICT = (int) 4134L;
    /**
     * {@snippet lang=c :
     * #define SO_NOTIFYCONFLICT 4134
     * }
     */
    public static int SO_NOTIFYCONFLICT() {
        return SO_NOTIFYCONFLICT;
    }

    private static final int SO_UPCALLCLOSEWAIT = (int) 4135L;
    /**
     * {@snippet lang=c :
     * #define SO_UPCALLCLOSEWAIT 4135
     * }
     */
    public static int SO_UPCALLCLOSEWAIT() {
        return SO_UPCALLCLOSEWAIT;
    }

    private static final int SO_RANDOMPORT = (int) 4226L;
    /**
     * {@snippet lang=c :
     * #define SO_RANDOMPORT 4226
     * }
     */
    public static int SO_RANDOMPORT() {
        return SO_RANDOMPORT;
    }

    private static final int SO_NP_EXTENSIONS = (int) 4227L;
    /**
     * {@snippet lang=c :
     * #define SO_NP_EXTENSIONS 4227
     * }
     */
    public static int SO_NP_EXTENSIONS() {
        return SO_NP_EXTENSIONS;
    }

    private static final int SO_NUMRCVPKT = (int) 4370L;
    /**
     * {@snippet lang=c :
     * #define SO_NUMRCVPKT 4370
     * }
     */
    public static int SO_NUMRCVPKT() {
        return SO_NUMRCVPKT;
    }

    private static final int SO_NET_SERVICE_TYPE = (int) 4374L;
    /**
     * {@snippet lang=c :
     * #define SO_NET_SERVICE_TYPE 4374
     * }
     */
    public static int SO_NET_SERVICE_TYPE() {
        return SO_NET_SERVICE_TYPE;
    }

    private static final int SO_NETSVC_MARKING_LEVEL = (int) 4377L;
    /**
     * {@snippet lang=c :
     * #define SO_NETSVC_MARKING_LEVEL 4377
     * }
     */
    public static int SO_NETSVC_MARKING_LEVEL() {
        return SO_NETSVC_MARKING_LEVEL;
    }

    private static final int SO_RESOLVER_SIGNATURE = (int) 4401L;
    /**
     * {@snippet lang=c :
     * #define SO_RESOLVER_SIGNATURE 4401
     * }
     */
    public static int SO_RESOLVER_SIGNATURE() {
        return SO_RESOLVER_SIGNATURE;
    }

    private static final int NET_SERVICE_TYPE_BE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_BE 0
     * }
     */
    public static int NET_SERVICE_TYPE_BE() {
        return NET_SERVICE_TYPE_BE;
    }

    private static final int NET_SERVICE_TYPE_BK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_BK 1
     * }
     */
    public static int NET_SERVICE_TYPE_BK() {
        return NET_SERVICE_TYPE_BK;
    }

    private static final int NET_SERVICE_TYPE_SIG = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_SIG 2
     * }
     */
    public static int NET_SERVICE_TYPE_SIG() {
        return NET_SERVICE_TYPE_SIG;
    }

    private static final int NET_SERVICE_TYPE_VI = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_VI 3
     * }
     */
    public static int NET_SERVICE_TYPE_VI() {
        return NET_SERVICE_TYPE_VI;
    }

    private static final int NET_SERVICE_TYPE_VO = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_VO 4
     * }
     */
    public static int NET_SERVICE_TYPE_VO() {
        return NET_SERVICE_TYPE_VO;
    }

    private static final int NET_SERVICE_TYPE_RV = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_RV 5
     * }
     */
    public static int NET_SERVICE_TYPE_RV() {
        return NET_SERVICE_TYPE_RV;
    }

    private static final int NET_SERVICE_TYPE_AV = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_AV 6
     * }
     */
    public static int NET_SERVICE_TYPE_AV() {
        return NET_SERVICE_TYPE_AV;
    }

    private static final int NET_SERVICE_TYPE_OAM = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_OAM 7
     * }
     */
    public static int NET_SERVICE_TYPE_OAM() {
        return NET_SERVICE_TYPE_OAM;
    }

    private static final int NET_SERVICE_TYPE_RD = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define NET_SERVICE_TYPE_RD 8
     * }
     */
    public static int NET_SERVICE_TYPE_RD() {
        return NET_SERVICE_TYPE_RD;
    }

    private static final int NETSVC_MRKNG_UNKNOWN = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define NETSVC_MRKNG_UNKNOWN 0
     * }
     */
    public static int NETSVC_MRKNG_UNKNOWN() {
        return NETSVC_MRKNG_UNKNOWN;
    }

    private static final int NETSVC_MRKNG_LVL_L2 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NETSVC_MRKNG_LVL_L2 1
     * }
     */
    public static int NETSVC_MRKNG_LVL_L2() {
        return NETSVC_MRKNG_LVL_L2;
    }

    private static final int NETSVC_MRKNG_LVL_L3L2_ALL = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NETSVC_MRKNG_LVL_L3L2_ALL 2
     * }
     */
    public static int NETSVC_MRKNG_LVL_L3L2_ALL() {
        return NETSVC_MRKNG_LVL_L3L2_ALL;
    }

    private static final int NETSVC_MRKNG_LVL_L3L2_BK = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define NETSVC_MRKNG_LVL_L3L2_BK 3
     * }
     */
    public static int NETSVC_MRKNG_LVL_L3L2_BK() {
        return NETSVC_MRKNG_LVL_L3L2_BK;
    }

    private static final int SAE_ASSOCID_ANY = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define SAE_ASSOCID_ANY 0
     * }
     */
    public static int SAE_ASSOCID_ANY() {
        return SAE_ASSOCID_ANY;
    }

    private static final int SAE_CONNID_ANY = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define SAE_CONNID_ANY 0
     * }
     */
    public static int SAE_CONNID_ANY() {
        return SAE_CONNID_ANY;
    }

    private static final int CONNECT_RESUME_ON_READ_WRITE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define CONNECT_RESUME_ON_READ_WRITE 1
     * }
     */
    public static int CONNECT_RESUME_ON_READ_WRITE() {
        return CONNECT_RESUME_ON_READ_WRITE;
    }

    private static final int CONNECT_DATA_IDEMPOTENT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define CONNECT_DATA_IDEMPOTENT 2
     * }
     */
    public static int CONNECT_DATA_IDEMPOTENT() {
        return CONNECT_DATA_IDEMPOTENT;
    }

    private static final int CONNECT_DATA_AUTHENTICATED = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define CONNECT_DATA_AUTHENTICATED 4
     * }
     */
    public static int CONNECT_DATA_AUTHENTICATED() {
        return CONNECT_DATA_AUTHENTICATED;
    }

    private static final int SONPX_SETOPTSHUT = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SONPX_SETOPTSHUT 1
     * }
     */
    public static int SONPX_SETOPTSHUT() {
        return SONPX_SETOPTSHUT;
    }

    private static final int SOL_SOCKET = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define SOL_SOCKET 65535
     * }
     */
    public static int SOL_SOCKET() {
        return SOL_SOCKET;
    }

    private static final int AF_UNSPEC = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define AF_UNSPEC 0
     * }
     */
    public static int AF_UNSPEC() {
        return AF_UNSPEC;
    }

    private static final int AF_UNIX = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define AF_UNIX 1
     * }
     */
    public static int AF_UNIX() {
        return AF_UNIX;
    }

    private static final int AF_INET = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return AF_INET;
    }

    private static final int AF_IMPLINK = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define AF_IMPLINK 3
     * }
     */
    public static int AF_IMPLINK() {
        return AF_IMPLINK;
    }

    private static final int AF_PUP = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define AF_PUP 4
     * }
     */
    public static int AF_PUP() {
        return AF_PUP;
    }

    private static final int AF_CHAOS = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define AF_CHAOS 5
     * }
     */
    public static int AF_CHAOS() {
        return AF_CHAOS;
    }

    private static final int AF_NS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define AF_NS 6
     * }
     */
    public static int AF_NS() {
        return AF_NS;
    }

    private static final int AF_ISO = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define AF_ISO 7
     * }
     */
    public static int AF_ISO() {
        return AF_ISO;
    }

    private static final int AF_ECMA = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define AF_ECMA 8
     * }
     */
    public static int AF_ECMA() {
        return AF_ECMA;
    }

    private static final int AF_DATAKIT = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define AF_DATAKIT 9
     * }
     */
    public static int AF_DATAKIT() {
        return AF_DATAKIT;
    }

    private static final int AF_CCITT = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define AF_CCITT 10
     * }
     */
    public static int AF_CCITT() {
        return AF_CCITT;
    }

    private static final int AF_SNA = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define AF_SNA 11
     * }
     */
    public static int AF_SNA() {
        return AF_SNA;
    }

    private static final int AF_DECnet = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define AF_DECnet 12
     * }
     */
    public static int AF_DECnet() {
        return AF_DECnet;
    }

    private static final int AF_DLI = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define AF_DLI 13
     * }
     */
    public static int AF_DLI() {
        return AF_DLI;
    }

    private static final int AF_LAT = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define AF_LAT 14
     * }
     */
    public static int AF_LAT() {
        return AF_LAT;
    }

    private static final int AF_HYLINK = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define AF_HYLINK 15
     * }
     */
    public static int AF_HYLINK() {
        return AF_HYLINK;
    }

    private static final int AF_APPLETALK = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define AF_APPLETALK 16
     * }
     */
    public static int AF_APPLETALK() {
        return AF_APPLETALK;
    }

    private static final int AF_ROUTE = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define AF_ROUTE 17
     * }
     */
    public static int AF_ROUTE() {
        return AF_ROUTE;
    }

    private static final int AF_LINK = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define AF_LINK 18
     * }
     */
    public static int AF_LINK() {
        return AF_LINK;
    }

    private static final int pseudo_AF_XTP = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define pseudo_AF_XTP 19
     * }
     */
    public static int pseudo_AF_XTP() {
        return pseudo_AF_XTP;
    }

    private static final int AF_COIP = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define AF_COIP 20
     * }
     */
    public static int AF_COIP() {
        return AF_COIP;
    }

    private static final int AF_CNT = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define AF_CNT 21
     * }
     */
    public static int AF_CNT() {
        return AF_CNT;
    }

    private static final int pseudo_AF_RTIP = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define pseudo_AF_RTIP 22
     * }
     */
    public static int pseudo_AF_RTIP() {
        return pseudo_AF_RTIP;
    }

    private static final int AF_IPX = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define AF_IPX 23
     * }
     */
    public static int AF_IPX() {
        return AF_IPX;
    }

    private static final int AF_SIP = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define AF_SIP 24
     * }
     */
    public static int AF_SIP() {
        return AF_SIP;
    }

    private static final int pseudo_AF_PIP = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define pseudo_AF_PIP 25
     * }
     */
    public static int pseudo_AF_PIP() {
        return pseudo_AF_PIP;
    }

    private static final int AF_NDRV = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define AF_NDRV 27
     * }
     */
    public static int AF_NDRV() {
        return AF_NDRV;
    }

    private static final int AF_ISDN = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define AF_ISDN 28
     * }
     */
    public static int AF_ISDN() {
        return AF_ISDN;
    }

    private static final int pseudo_AF_KEY = (int) 29L;
    /**
     * {@snippet lang=c :
     * #define pseudo_AF_KEY 29
     * }
     */
    public static int pseudo_AF_KEY() {
        return pseudo_AF_KEY;
    }

    private static final int AF_INET6 = (int) 30L;
    /**
     * {@snippet lang=c :
     * #define AF_INET6 30
     * }
     */
    public static int AF_INET6() {
        return AF_INET6;
    }

    private static final int AF_NATM = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define AF_NATM 31
     * }
     */
    public static int AF_NATM() {
        return AF_NATM;
    }

    private static final int AF_SYSTEM = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define AF_SYSTEM 32
     * }
     */
    public static int AF_SYSTEM() {
        return AF_SYSTEM;
    }

    private static final int AF_NETBIOS = (int) 33L;
    /**
     * {@snippet lang=c :
     * #define AF_NETBIOS 33
     * }
     */
    public static int AF_NETBIOS() {
        return AF_NETBIOS;
    }

    private static final int AF_PPP = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define AF_PPP 34
     * }
     */
    public static int AF_PPP() {
        return AF_PPP;
    }

    private static final int pseudo_AF_HDRCMPLT = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define pseudo_AF_HDRCMPLT 35
     * }
     */
    public static int pseudo_AF_HDRCMPLT() {
        return pseudo_AF_HDRCMPLT;
    }

    private static final int AF_RESERVED_36 = (int) 36L;
    /**
     * {@snippet lang=c :
     * #define AF_RESERVED_36 36
     * }
     */
    public static int AF_RESERVED_36() {
        return AF_RESERVED_36;
    }

    private static final int AF_IEEE80211 = (int) 37L;
    /**
     * {@snippet lang=c :
     * #define AF_IEEE80211 37
     * }
     */
    public static int AF_IEEE80211() {
        return AF_IEEE80211;
    }

    private static final int AF_UTUN = (int) 38L;
    /**
     * {@snippet lang=c :
     * #define AF_UTUN 38
     * }
     */
    public static int AF_UTUN() {
        return AF_UTUN;
    }

    private static final int AF_VSOCK = (int) 40L;
    /**
     * {@snippet lang=c :
     * #define AF_VSOCK 40
     * }
     */
    public static int AF_VSOCK() {
        return AF_VSOCK;
    }

    private static final int AF_MAX = (int) 41L;
    /**
     * {@snippet lang=c :
     * #define AF_MAX 41
     * }
     */
    public static int AF_MAX() {
        return AF_MAX;
    }

    private static final int SOCK_MAXADDRLEN = (int) 255L;
    /**
     * {@snippet lang=c :
     * #define SOCK_MAXADDRLEN 255
     * }
     */
    public static int SOCK_MAXADDRLEN() {
        return SOCK_MAXADDRLEN;
    }

    private static final int _SS_MAXSIZE = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define _SS_MAXSIZE 128
     * }
     */
    public static int _SS_MAXSIZE() {
        return _SS_MAXSIZE;
    }

    private static final int NET_RT_DUMP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_DUMP 1
     * }
     */
    public static int NET_RT_DUMP() {
        return NET_RT_DUMP;
    }

    private static final int NET_RT_FLAGS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_FLAGS 2
     * }
     */
    public static int NET_RT_FLAGS() {
        return NET_RT_FLAGS;
    }

    private static final int NET_RT_IFLIST = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_IFLIST 3
     * }
     */
    public static int NET_RT_IFLIST() {
        return NET_RT_IFLIST;
    }

    private static final int NET_RT_STAT = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_STAT 4
     * }
     */
    public static int NET_RT_STAT() {
        return NET_RT_STAT;
    }

    private static final int NET_RT_TRASH = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_TRASH 5
     * }
     */
    public static int NET_RT_TRASH() {
        return NET_RT_TRASH;
    }

    private static final int NET_RT_IFLIST2 = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_IFLIST2 6
     * }
     */
    public static int NET_RT_IFLIST2() {
        return NET_RT_IFLIST2;
    }

    private static final int NET_RT_DUMP2 = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_DUMP2 7
     * }
     */
    public static int NET_RT_DUMP2() {
        return NET_RT_DUMP2;
    }

    private static final int NET_RT_FLAGS_PRIV = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_FLAGS_PRIV 10
     * }
     */
    public static int NET_RT_FLAGS_PRIV() {
        return NET_RT_FLAGS_PRIV;
    }

    private static final int NET_RT_MAXID = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define NET_RT_MAXID 11
     * }
     */
    public static int NET_RT_MAXID() {
        return NET_RT_MAXID;
    }

    private static final int SOMAXCONN = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define SOMAXCONN 128
     * }
     */
    public static int SOMAXCONN() {
        return SOMAXCONN;
    }

    private static final int MSG_OOB = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define MSG_OOB 1
     * }
     */
    public static int MSG_OOB() {
        return MSG_OOB;
    }

    private static final int MSG_PEEK = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define MSG_PEEK 2
     * }
     */
    public static int MSG_PEEK() {
        return MSG_PEEK;
    }

    private static final int MSG_DONTROUTE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define MSG_DONTROUTE 4
     * }
     */
    public static int MSG_DONTROUTE() {
        return MSG_DONTROUTE;
    }

    private static final int MSG_EOR = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define MSG_EOR 8
     * }
     */
    public static int MSG_EOR() {
        return MSG_EOR;
    }

    private static final int MSG_TRUNC = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define MSG_TRUNC 16
     * }
     */
    public static int MSG_TRUNC() {
        return MSG_TRUNC;
    }

    private static final int MSG_CTRUNC = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define MSG_CTRUNC 32
     * }
     */
    public static int MSG_CTRUNC() {
        return MSG_CTRUNC;
    }

    private static final int MSG_WAITALL = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define MSG_WAITALL 64
     * }
     */
    public static int MSG_WAITALL() {
        return MSG_WAITALL;
    }

    private static final int MSG_DONTWAIT = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define MSG_DONTWAIT 128
     * }
     */
    public static int MSG_DONTWAIT() {
        return MSG_DONTWAIT;
    }

    private static final int MSG_EOF = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define MSG_EOF 256
     * }
     */
    public static int MSG_EOF() {
        return MSG_EOF;
    }

    private static final int MSG_WAITSTREAM = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define MSG_WAITSTREAM 512
     * }
     */
    public static int MSG_WAITSTREAM() {
        return MSG_WAITSTREAM;
    }

    private static final int MSG_FLUSH = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define MSG_FLUSH 1024
     * }
     */
    public static int MSG_FLUSH() {
        return MSG_FLUSH;
    }

    private static final int MSG_HOLD = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define MSG_HOLD 2048
     * }
     */
    public static int MSG_HOLD() {
        return MSG_HOLD;
    }

    private static final int MSG_SEND = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define MSG_SEND 4096
     * }
     */
    public static int MSG_SEND() {
        return MSG_SEND;
    }

    private static final int MSG_HAVEMORE = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define MSG_HAVEMORE 8192
     * }
     */
    public static int MSG_HAVEMORE() {
        return MSG_HAVEMORE;
    }

    private static final int MSG_RCVMORE = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define MSG_RCVMORE 16384
     * }
     */
    public static int MSG_RCVMORE() {
        return MSG_RCVMORE;
    }

    private static final int MSG_NEEDSA = (int) 65536L;
    /**
     * {@snippet lang=c :
     * #define MSG_NEEDSA 65536
     * }
     */
    public static int MSG_NEEDSA() {
        return MSG_NEEDSA;
    }

    private static final int MSG_NOSIGNAL = (int) 524288L;
    /**
     * {@snippet lang=c :
     * #define MSG_NOSIGNAL 524288
     * }
     */
    public static int MSG_NOSIGNAL() {
        return MSG_NOSIGNAL;
    }

    private static final int SCM_RIGHTS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SCM_RIGHTS 1
     * }
     */
    public static int SCM_RIGHTS() {
        return SCM_RIGHTS;
    }

    private static final int SCM_TIMESTAMP = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMP 2
     * }
     */
    public static int SCM_TIMESTAMP() {
        return SCM_TIMESTAMP;
    }

    private static final int SCM_CREDS = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define SCM_CREDS 3
     * }
     */
    public static int SCM_CREDS() {
        return SCM_CREDS;
    }

    private static final int SCM_TIMESTAMP_MONOTONIC = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMP_MONOTONIC 4
     * }
     */
    public static int SCM_TIMESTAMP_MONOTONIC() {
        return SCM_TIMESTAMP_MONOTONIC;
    }

    private static final int SHUT_RD = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define SHUT_RD 0
     * }
     */
    public static int SHUT_RD() {
        return SHUT_RD;
    }

    private static final int SHUT_WR = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SHUT_WR 1
     * }
     */
    public static int SHUT_WR() {
        return SHUT_WR;
    }

    private static final int SHUT_RDWR = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SHUT_RDWR 2
     * }
     */
    public static int SHUT_RDWR() {
        return SHUT_RDWR;
    }

    private static final int SOL_LOCAL = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define SOL_LOCAL 0
     * }
     */
    public static int SOL_LOCAL() {
        return SOL_LOCAL;
    }

    private static final int LOCAL_PEERCRED = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEERCRED 1
     * }
     */
    public static int LOCAL_PEERCRED() {
        return LOCAL_PEERCRED;
    }

    private static final int LOCAL_PEERPID = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEERPID 2
     * }
     */
    public static int LOCAL_PEERPID() {
        return LOCAL_PEERPID;
    }

    private static final int LOCAL_PEEREPID = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEEREPID 3
     * }
     */
    public static int LOCAL_PEEREPID() {
        return LOCAL_PEEREPID;
    }

    private static final int LOCAL_PEERUUID = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEERUUID 4
     * }
     */
    public static int LOCAL_PEERUUID() {
        return LOCAL_PEERUUID;
    }

    private static final int LOCAL_PEEREUUID = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEEREUUID 5
     * }
     */
    public static int LOCAL_PEEREUUID() {
        return LOCAL_PEEREUUID;
    }

    private static final int LOCAL_PEERTOKEN = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define LOCAL_PEERTOKEN 6
     * }
     */
    public static int LOCAL_PEERTOKEN() {
        return LOCAL_PEERTOKEN;
    }

    private static final int KEV_CTL_SUBCLASS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEV_CTL_SUBCLASS 2
     * }
     */
    public static int KEV_CTL_SUBCLASS() {
        return KEV_CTL_SUBCLASS;
    }

    private static final int KEV_CTL_REGISTERED = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define KEV_CTL_REGISTERED 1
     * }
     */
    public static int KEV_CTL_REGISTERED() {
        return KEV_CTL_REGISTERED;
    }

    private static final int KEV_CTL_DEREGISTERED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEV_CTL_DEREGISTERED 2
     * }
     */
    public static int KEV_CTL_DEREGISTERED() {
        return KEV_CTL_DEREGISTERED;
    }

    private static final int MAX_KCTL_NAME = (int) 96L;
    /**
     * {@snippet lang=c :
     * #define MAX_KCTL_NAME 96
     * }
     */
    public static int MAX_KCTL_NAME() {
        return MAX_KCTL_NAME;
    }

    private static final int EVFILT_SYSCOUNT = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define EVFILT_SYSCOUNT 18
     * }
     */
    public static int EVFILT_SYSCOUNT() {
        return EVFILT_SYSCOUNT;
    }

    private static final int KEVENT_FLAG_NONE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define KEVENT_FLAG_NONE 0
     * }
     */
    public static int KEVENT_FLAG_NONE() {
        return KEVENT_FLAG_NONE;
    }

    private static final int KEVENT_FLAG_IMMEDIATE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define KEVENT_FLAG_IMMEDIATE 1
     * }
     */
    public static int KEVENT_FLAG_IMMEDIATE() {
        return KEVENT_FLAG_IMMEDIATE;
    }

    private static final int KEVENT_FLAG_ERROR_EVENTS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define KEVENT_FLAG_ERROR_EVENTS 2
     * }
     */
    public static int KEVENT_FLAG_ERROR_EVENTS() {
        return KEVENT_FLAG_ERROR_EVENTS;
    }

    private static final int EV_ADD = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define EV_ADD 1
     * }
     */
    public static int EV_ADD() {
        return EV_ADD;
    }

    private static final int EV_DELETE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define EV_DELETE 2
     * }
     */
    public static int EV_DELETE() {
        return EV_DELETE;
    }

    private static final int EV_ENABLE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define EV_ENABLE 4
     * }
     */
    public static int EV_ENABLE() {
        return EV_ENABLE;
    }

    private static final int EV_DISABLE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define EV_DISABLE 8
     * }
     */
    public static int EV_DISABLE() {
        return EV_DISABLE;
    }

    private static final int EV_ONESHOT = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define EV_ONESHOT 16
     * }
     */
    public static int EV_ONESHOT() {
        return EV_ONESHOT;
    }

    private static final int EV_CLEAR = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define EV_CLEAR 32
     * }
     */
    public static int EV_CLEAR() {
        return EV_CLEAR;
    }

    private static final int EV_RECEIPT = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define EV_RECEIPT 64
     * }
     */
    public static int EV_RECEIPT() {
        return EV_RECEIPT;
    }

    private static final int EV_DISPATCH = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define EV_DISPATCH 128
     * }
     */
    public static int EV_DISPATCH() {
        return EV_DISPATCH;
    }

    private static final int EV_UDATA_SPECIFIC = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define EV_UDATA_SPECIFIC 256
     * }
     */
    public static int EV_UDATA_SPECIFIC() {
        return EV_UDATA_SPECIFIC;
    }

    private static final int EV_VANISHED = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define EV_VANISHED 512
     * }
     */
    public static int EV_VANISHED() {
        return EV_VANISHED;
    }

    private static final int EV_SYSFLAGS = (int) 61440L;
    /**
     * {@snippet lang=c :
     * #define EV_SYSFLAGS 61440
     * }
     */
    public static int EV_SYSFLAGS() {
        return EV_SYSFLAGS;
    }

    private static final int EV_FLAG0 = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define EV_FLAG0 4096
     * }
     */
    public static int EV_FLAG0() {
        return EV_FLAG0;
    }

    private static final int EV_FLAG1 = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define EV_FLAG1 8192
     * }
     */
    public static int EV_FLAG1() {
        return EV_FLAG1;
    }

    private static final int EV_EOF = (int) 32768L;
    /**
     * {@snippet lang=c :
     * #define EV_EOF 32768
     * }
     */
    public static int EV_EOF() {
        return EV_EOF;
    }

    private static final int EV_ERROR = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define EV_ERROR 16384
     * }
     */
    public static int EV_ERROR() {
        return EV_ERROR;
    }

    private static final int NOTE_TRIGGER = (int) 16777216L;
    /**
     * {@snippet lang=c :
     * #define NOTE_TRIGGER 16777216
     * }
     */
    public static int NOTE_TRIGGER() {
        return NOTE_TRIGGER;
    }

    private static final int NOTE_FFNOP = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define NOTE_FFNOP 0
     * }
     */
    public static int NOTE_FFNOP() {
        return NOTE_FFNOP;
    }

    private static final int NOTE_FFAND = (int) 1073741824L;
    /**
     * {@snippet lang=c :
     * #define NOTE_FFAND 1073741824
     * }
     */
    public static int NOTE_FFAND() {
        return NOTE_FFAND;
    }

    private static final int NOTE_FFLAGSMASK = (int) 16777215L;
    /**
     * {@snippet lang=c :
     * #define NOTE_FFLAGSMASK 16777215
     * }
     */
    public static int NOTE_FFLAGSMASK() {
        return NOTE_FFLAGSMASK;
    }

    private static final int NOTE_LOWAT = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NOTE_LOWAT 1
     * }
     */
    public static int NOTE_LOWAT() {
        return NOTE_LOWAT;
    }

    private static final int NOTE_OOB = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NOTE_OOB 2
     * }
     */
    public static int NOTE_OOB() {
        return NOTE_OOB;
    }

    private static final int NOTE_DELETE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NOTE_DELETE 1
     * }
     */
    public static int NOTE_DELETE() {
        return NOTE_DELETE;
    }

    private static final int NOTE_WRITE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NOTE_WRITE 2
     * }
     */
    public static int NOTE_WRITE() {
        return NOTE_WRITE;
    }

    private static final int NOTE_EXTEND = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXTEND 4
     * }
     */
    public static int NOTE_EXTEND() {
        return NOTE_EXTEND;
    }

    private static final int NOTE_ATTRIB = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define NOTE_ATTRIB 8
     * }
     */
    public static int NOTE_ATTRIB() {
        return NOTE_ATTRIB;
    }

    private static final int NOTE_LINK = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define NOTE_LINK 16
     * }
     */
    public static int NOTE_LINK() {
        return NOTE_LINK;
    }

    private static final int NOTE_RENAME = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define NOTE_RENAME 32
     * }
     */
    public static int NOTE_RENAME() {
        return NOTE_RENAME;
    }

    private static final int NOTE_REVOKE = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define NOTE_REVOKE 64
     * }
     */
    public static int NOTE_REVOKE() {
        return NOTE_REVOKE;
    }

    private static final int NOTE_NONE = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define NOTE_NONE 128
     * }
     */
    public static int NOTE_NONE() {
        return NOTE_NONE;
    }

    private static final int NOTE_FUNLOCK = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define NOTE_FUNLOCK 256
     * }
     */
    public static int NOTE_FUNLOCK() {
        return NOTE_FUNLOCK;
    }

    private static final int NOTE_LEASE_DOWNGRADE = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define NOTE_LEASE_DOWNGRADE 512
     * }
     */
    public static int NOTE_LEASE_DOWNGRADE() {
        return NOTE_LEASE_DOWNGRADE;
    }

    private static final int NOTE_LEASE_RELEASE = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define NOTE_LEASE_RELEASE 1024
     * }
     */
    public static int NOTE_LEASE_RELEASE() {
        return NOTE_LEASE_RELEASE;
    }

    private static final int NOTE_FORK = (int) 1073741824L;
    /**
     * {@snippet lang=c :
     * #define NOTE_FORK 1073741824
     * }
     */
    public static int NOTE_FORK() {
        return NOTE_FORK;
    }

    private static final int NOTE_EXEC = (int) 536870912L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXEC 536870912
     * }
     */
    public static int NOTE_EXEC() {
        return NOTE_EXEC;
    }

    private static final int NOTE_SIGNAL = (int) 134217728L;
    /**
     * {@snippet lang=c :
     * #define NOTE_SIGNAL 134217728
     * }
     */
    public static int NOTE_SIGNAL() {
        return NOTE_SIGNAL;
    }

    private static final int NOTE_EXITSTATUS = (int) 67108864L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXITSTATUS 67108864
     * }
     */
    public static int NOTE_EXITSTATUS() {
        return NOTE_EXITSTATUS;
    }

    private static final int NOTE_EXIT_DETAIL = (int) 33554432L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXIT_DETAIL 33554432
     * }
     */
    public static int NOTE_EXIT_DETAIL() {
        return NOTE_EXIT_DETAIL;
    }

    private static final int NOTE_PDATAMASK = (int) 1048575L;
    /**
     * {@snippet lang=c :
     * #define NOTE_PDATAMASK 1048575
     * }
     */
    public static int NOTE_PDATAMASK() {
        return NOTE_PDATAMASK;
    }

    private static final int NOTE_EXIT_DETAIL_MASK = (int) 458752L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXIT_DETAIL_MASK 458752
     * }
     */
    public static int NOTE_EXIT_DETAIL_MASK() {
        return NOTE_EXIT_DETAIL_MASK;
    }

    private static final int NOTE_EXIT_DECRYPTFAIL = (int) 65536L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXIT_DECRYPTFAIL 65536
     * }
     */
    public static int NOTE_EXIT_DECRYPTFAIL() {
        return NOTE_EXIT_DECRYPTFAIL;
    }

    private static final int NOTE_EXIT_MEMORY = (int) 131072L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXIT_MEMORY 131072
     * }
     */
    public static int NOTE_EXIT_MEMORY() {
        return NOTE_EXIT_MEMORY;
    }

    private static final int NOTE_EXIT_CSERROR = (int) 262144L;
    /**
     * {@snippet lang=c :
     * #define NOTE_EXIT_CSERROR 262144
     * }
     */
    public static int NOTE_EXIT_CSERROR() {
        return NOTE_EXIT_CSERROR;
    }

    private static final int NOTE_VM_PRESSURE_TERMINATE = (int) 1073741824L;
    /**
     * {@snippet lang=c :
     * #define NOTE_VM_PRESSURE_TERMINATE 1073741824
     * }
     */
    public static int NOTE_VM_PRESSURE_TERMINATE() {
        return NOTE_VM_PRESSURE_TERMINATE;
    }

    private static final int NOTE_VM_PRESSURE_SUDDEN_TERMINATE = (int) 536870912L;
    /**
     * {@snippet lang=c :
     * #define NOTE_VM_PRESSURE_SUDDEN_TERMINATE 536870912
     * }
     */
    public static int NOTE_VM_PRESSURE_SUDDEN_TERMINATE() {
        return NOTE_VM_PRESSURE_SUDDEN_TERMINATE;
    }

    private static final int NOTE_VM_ERROR = (int) 268435456L;
    /**
     * {@snippet lang=c :
     * #define NOTE_VM_ERROR 268435456
     * }
     */
    public static int NOTE_VM_ERROR() {
        return NOTE_VM_ERROR;
    }

    private static final int NOTE_SECONDS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NOTE_SECONDS 1
     * }
     */
    public static int NOTE_SECONDS() {
        return NOTE_SECONDS;
    }

    private static final int NOTE_USECONDS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NOTE_USECONDS 2
     * }
     */
    public static int NOTE_USECONDS() {
        return NOTE_USECONDS;
    }

    private static final int NOTE_NSECONDS = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define NOTE_NSECONDS 4
     * }
     */
    public static int NOTE_NSECONDS() {
        return NOTE_NSECONDS;
    }

    private static final int NOTE_ABSOLUTE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define NOTE_ABSOLUTE 8
     * }
     */
    public static int NOTE_ABSOLUTE() {
        return NOTE_ABSOLUTE;
    }

    private static final int NOTE_LEEWAY = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define NOTE_LEEWAY 16
     * }
     */
    public static int NOTE_LEEWAY() {
        return NOTE_LEEWAY;
    }

    private static final int NOTE_CRITICAL = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define NOTE_CRITICAL 32
     * }
     */
    public static int NOTE_CRITICAL() {
        return NOTE_CRITICAL;
    }

    private static final int NOTE_BACKGROUND = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define NOTE_BACKGROUND 64
     * }
     */
    public static int NOTE_BACKGROUND() {
        return NOTE_BACKGROUND;
    }

    private static final int NOTE_MACH_CONTINUOUS_TIME = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define NOTE_MACH_CONTINUOUS_TIME 128
     * }
     */
    public static int NOTE_MACH_CONTINUOUS_TIME() {
        return NOTE_MACH_CONTINUOUS_TIME;
    }

    private static final int NOTE_MACHTIME = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define NOTE_MACHTIME 256
     * }
     */
    public static int NOTE_MACHTIME() {
        return NOTE_MACHTIME;
    }

    private static final int NOTE_TRACK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define NOTE_TRACK 1
     * }
     */
    public static int NOTE_TRACK() {
        return NOTE_TRACK;
    }

    private static final int NOTE_TRACKERR = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define NOTE_TRACKERR 2
     * }
     */
    public static int NOTE_TRACKERR() {
        return NOTE_TRACKERR;
    }

    private static final int NOTE_CHILD = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define NOTE_CHILD 4
     * }
     */
    public static int NOTE_CHILD() {
        return NOTE_CHILD;
    }

    private static final int IF_NAMESIZE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IF_NAMESIZE 16
     * }
     */
    public static int IF_NAMESIZE() {
        return IF_NAMESIZE;
    }

    private static final int APPLE_IF_FAM_LOOPBACK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_LOOPBACK 1
     * }
     */
    public static int APPLE_IF_FAM_LOOPBACK() {
        return APPLE_IF_FAM_LOOPBACK;
    }

    private static final int APPLE_IF_FAM_ETHERNET = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_ETHERNET 2
     * }
     */
    public static int APPLE_IF_FAM_ETHERNET() {
        return APPLE_IF_FAM_ETHERNET;
    }

    private static final int APPLE_IF_FAM_SLIP = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_SLIP 3
     * }
     */
    public static int APPLE_IF_FAM_SLIP() {
        return APPLE_IF_FAM_SLIP;
    }

    private static final int APPLE_IF_FAM_TUN = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_TUN 4
     * }
     */
    public static int APPLE_IF_FAM_TUN() {
        return APPLE_IF_FAM_TUN;
    }

    private static final int APPLE_IF_FAM_VLAN = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_VLAN 5
     * }
     */
    public static int APPLE_IF_FAM_VLAN() {
        return APPLE_IF_FAM_VLAN;
    }

    private static final int APPLE_IF_FAM_PPP = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_PPP 6
     * }
     */
    public static int APPLE_IF_FAM_PPP() {
        return APPLE_IF_FAM_PPP;
    }

    private static final int APPLE_IF_FAM_PVC = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_PVC 7
     * }
     */
    public static int APPLE_IF_FAM_PVC() {
        return APPLE_IF_FAM_PVC;
    }

    private static final int APPLE_IF_FAM_DISC = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_DISC 8
     * }
     */
    public static int APPLE_IF_FAM_DISC() {
        return APPLE_IF_FAM_DISC;
    }

    private static final int APPLE_IF_FAM_MDECAP = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_MDECAP 9
     * }
     */
    public static int APPLE_IF_FAM_MDECAP() {
        return APPLE_IF_FAM_MDECAP;
    }

    private static final int APPLE_IF_FAM_GIF = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_GIF 10
     * }
     */
    public static int APPLE_IF_FAM_GIF() {
        return APPLE_IF_FAM_GIF;
    }

    private static final int APPLE_IF_FAM_FAITH = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_FAITH 11
     * }
     */
    public static int APPLE_IF_FAM_FAITH() {
        return APPLE_IF_FAM_FAITH;
    }

    private static final int APPLE_IF_FAM_STF = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_STF 12
     * }
     */
    public static int APPLE_IF_FAM_STF() {
        return APPLE_IF_FAM_STF;
    }

    private static final int APPLE_IF_FAM_FIREWIRE = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_FIREWIRE 13
     * }
     */
    public static int APPLE_IF_FAM_FIREWIRE() {
        return APPLE_IF_FAM_FIREWIRE;
    }

    private static final int APPLE_IF_FAM_BOND = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_BOND 14
     * }
     */
    public static int APPLE_IF_FAM_BOND() {
        return APPLE_IF_FAM_BOND;
    }

    private static final int APPLE_IF_FAM_CELLULAR = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_CELLULAR 15
     * }
     */
    public static int APPLE_IF_FAM_CELLULAR() {
        return APPLE_IF_FAM_CELLULAR;
    }

    private static final int APPLE_IF_FAM_UNUSED_16 = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_UNUSED_16 16
     * }
     */
    public static int APPLE_IF_FAM_UNUSED_16() {
        return APPLE_IF_FAM_UNUSED_16;
    }

    private static final int APPLE_IF_FAM_UTUN = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_UTUN 17
     * }
     */
    public static int APPLE_IF_FAM_UTUN() {
        return APPLE_IF_FAM_UTUN;
    }

    private static final int APPLE_IF_FAM_IPSEC = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define APPLE_IF_FAM_IPSEC 18
     * }
     */
    public static int APPLE_IF_FAM_IPSEC() {
        return APPLE_IF_FAM_IPSEC;
    }

    private static final int IF_MINMTU = (int) 72L;
    /**
     * {@snippet lang=c :
     * #define IF_MINMTU 72
     * }
     */
    public static int IF_MINMTU() {
        return IF_MINMTU;
    }

    private static final int IF_MAXMTU = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define IF_MAXMTU 65535
     * }
     */
    public static int IF_MAXMTU() {
        return IF_MAXMTU;
    }

    private static final int IFNAMSIZ = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IFNAMSIZ 16
     * }
     */
    public static int IFNAMSIZ() {
        return IFNAMSIZ;
    }

    private static final int IFF_UP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IFF_UP 1
     * }
     */
    public static int IFF_UP() {
        return IFF_UP;
    }

    private static final int IFF_BROADCAST = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IFF_BROADCAST 2
     * }
     */
    public static int IFF_BROADCAST() {
        return IFF_BROADCAST;
    }

    private static final int IFF_DEBUG = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IFF_DEBUG 4
     * }
     */
    public static int IFF_DEBUG() {
        return IFF_DEBUG;
    }

    private static final int IFF_LOOPBACK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IFF_LOOPBACK 8
     * }
     */
    public static int IFF_LOOPBACK() {
        return IFF_LOOPBACK;
    }

    private static final int IFF_POINTOPOINT = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IFF_POINTOPOINT 16
     * }
     */
    public static int IFF_POINTOPOINT() {
        return IFF_POINTOPOINT;
    }

    private static final int IFF_NOTRAILERS = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IFF_NOTRAILERS 32
     * }
     */
    public static int IFF_NOTRAILERS() {
        return IFF_NOTRAILERS;
    }

    private static final int IFF_RUNNING = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define IFF_RUNNING 64
     * }
     */
    public static int IFF_RUNNING() {
        return IFF_RUNNING;
    }

    private static final int IFF_NOARP = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IFF_NOARP 128
     * }
     */
    public static int IFF_NOARP() {
        return IFF_NOARP;
    }

    private static final int IFF_PROMISC = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define IFF_PROMISC 256
     * }
     */
    public static int IFF_PROMISC() {
        return IFF_PROMISC;
    }

    private static final int IFF_ALLMULTI = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define IFF_ALLMULTI 512
     * }
     */
    public static int IFF_ALLMULTI() {
        return IFF_ALLMULTI;
    }

    private static final int IFF_OACTIVE = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define IFF_OACTIVE 1024
     * }
     */
    public static int IFF_OACTIVE() {
        return IFF_OACTIVE;
    }

    private static final int IFF_SIMPLEX = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define IFF_SIMPLEX 2048
     * }
     */
    public static int IFF_SIMPLEX() {
        return IFF_SIMPLEX;
    }

    private static final int IFF_LINK0 = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define IFF_LINK0 4096
     * }
     */
    public static int IFF_LINK0() {
        return IFF_LINK0;
    }

    private static final int IFF_LINK1 = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define IFF_LINK1 8192
     * }
     */
    public static int IFF_LINK1() {
        return IFF_LINK1;
    }

    private static final int IFF_LINK2 = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define IFF_LINK2 16384
     * }
     */
    public static int IFF_LINK2() {
        return IFF_LINK2;
    }

    private static final int IFF_MULTICAST = (int) 32768L;
    /**
     * {@snippet lang=c :
     * #define IFF_MULTICAST 32768
     * }
     */
    public static int IFF_MULTICAST() {
        return IFF_MULTICAST;
    }

    private static final int IFCAP_RXCSUM = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_RXCSUM 1
     * }
     */
    public static int IFCAP_RXCSUM() {
        return IFCAP_RXCSUM;
    }

    private static final int IFCAP_TXCSUM = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_TXCSUM 2
     * }
     */
    public static int IFCAP_TXCSUM() {
        return IFCAP_TXCSUM;
    }

    private static final int IFCAP_VLAN_MTU = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_VLAN_MTU 4
     * }
     */
    public static int IFCAP_VLAN_MTU() {
        return IFCAP_VLAN_MTU;
    }

    private static final int IFCAP_VLAN_HWTAGGING = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_VLAN_HWTAGGING 8
     * }
     */
    public static int IFCAP_VLAN_HWTAGGING() {
        return IFCAP_VLAN_HWTAGGING;
    }

    private static final int IFCAP_JUMBO_MTU = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_JUMBO_MTU 16
     * }
     */
    public static int IFCAP_JUMBO_MTU() {
        return IFCAP_JUMBO_MTU;
    }

    private static final int IFCAP_TSO4 = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_TSO4 32
     * }
     */
    public static int IFCAP_TSO4() {
        return IFCAP_TSO4;
    }

    private static final int IFCAP_TSO6 = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_TSO6 64
     * }
     */
    public static int IFCAP_TSO6() {
        return IFCAP_TSO6;
    }

    private static final int IFCAP_LRO = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_LRO 128
     * }
     */
    public static int IFCAP_LRO() {
        return IFCAP_LRO;
    }

    private static final int IFCAP_AV = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_AV 256
     * }
     */
    public static int IFCAP_AV() {
        return IFCAP_AV;
    }

    private static final int IFCAP_TXSTATUS = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_TXSTATUS 512
     * }
     */
    public static int IFCAP_TXSTATUS() {
        return IFCAP_TXSTATUS;
    }

    private static final int IFCAP_SKYWALK = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_SKYWALK 1024
     * }
     */
    public static int IFCAP_SKYWALK() {
        return IFCAP_SKYWALK;
    }

    private static final int IFCAP_HW_TIMESTAMP = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_HW_TIMESTAMP 2048
     * }
     */
    public static int IFCAP_HW_TIMESTAMP() {
        return IFCAP_HW_TIMESTAMP;
    }

    private static final int IFCAP_SW_TIMESTAMP = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_SW_TIMESTAMP 4096
     * }
     */
    public static int IFCAP_SW_TIMESTAMP() {
        return IFCAP_SW_TIMESTAMP;
    }

    private static final int IFCAP_CSUM_PARTIAL = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_CSUM_PARTIAL 8192
     * }
     */
    public static int IFCAP_CSUM_PARTIAL() {
        return IFCAP_CSUM_PARTIAL;
    }

    private static final int IFCAP_CSUM_ZERO_INVERT = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define IFCAP_CSUM_ZERO_INVERT 16384
     * }
     */
    public static int IFCAP_CSUM_ZERO_INVERT() {
        return IFCAP_CSUM_ZERO_INVERT;
    }

    private static final int IFQ_MAXLEN = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IFQ_MAXLEN 128
     * }
     */
    public static int IFQ_MAXLEN() {
        return IFQ_MAXLEN;
    }

    private static final int IFNET_SLOWHZ = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IFNET_SLOWHZ 1
     * }
     */
    public static int IFNET_SLOWHZ() {
        return IFNET_SLOWHZ;
    }

    private static final int IF_WAKE_ON_MAGIC_PACKET = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IF_WAKE_ON_MAGIC_PACKET 1
     * }
     */
    public static int IF_WAKE_ON_MAGIC_PACKET() {
        return IF_WAKE_ON_MAGIC_PACKET;
    }

    private static final int IFRTYPE_FUNCTIONAL_UNKNOWN = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_UNKNOWN 0
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_UNKNOWN() {
        return IFRTYPE_FUNCTIONAL_UNKNOWN;
    }

    private static final int IFRTYPE_FUNCTIONAL_LOOPBACK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_LOOPBACK 1
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_LOOPBACK() {
        return IFRTYPE_FUNCTIONAL_LOOPBACK;
    }

    private static final int IFRTYPE_FUNCTIONAL_WIRED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_WIRED 2
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_WIRED() {
        return IFRTYPE_FUNCTIONAL_WIRED;
    }

    private static final int IFRTYPE_FUNCTIONAL_WIFI_INFRA = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_WIFI_INFRA 3
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_WIFI_INFRA() {
        return IFRTYPE_FUNCTIONAL_WIFI_INFRA;
    }

    private static final int IFRTYPE_FUNCTIONAL_WIFI_AWDL = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_WIFI_AWDL 4
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_WIFI_AWDL() {
        return IFRTYPE_FUNCTIONAL_WIFI_AWDL;
    }

    private static final int IFRTYPE_FUNCTIONAL_CELLULAR = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_CELLULAR 5
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_CELLULAR() {
        return IFRTYPE_FUNCTIONAL_CELLULAR;
    }

    private static final int IFRTYPE_FUNCTIONAL_INTCOPROC = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_INTCOPROC 6
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_INTCOPROC() {
        return IFRTYPE_FUNCTIONAL_INTCOPROC;
    }

    private static final int IFRTYPE_FUNCTIONAL_COMPANIONLINK = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_COMPANIONLINK 7
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_COMPANIONLINK() {
        return IFRTYPE_FUNCTIONAL_COMPANIONLINK;
    }

    private static final int IFRTYPE_FUNCTIONAL_MANAGEMENT = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_MANAGEMENT 8
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_MANAGEMENT() {
        return IFRTYPE_FUNCTIONAL_MANAGEMENT;
    }

    private static final int IFRTYPE_FUNCTIONAL_LAST = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IFRTYPE_FUNCTIONAL_LAST 8
     * }
     */
    public static int IFRTYPE_FUNCTIONAL_LAST() {
        return IFRTYPE_FUNCTIONAL_LAST;
    }

    private static final int IFSTATMAX = (int) 800L;
    /**
     * {@snippet lang=c :
     * #define IFSTATMAX 800
     * }
     */
    public static int IFSTATMAX() {
        return IFSTATMAX;
    }

    private static final int RTM_RTTUNIT = (int) 1000000L;
    /**
     * {@snippet lang=c :
     * #define RTM_RTTUNIT 1000000
     * }
     */
    public static int RTM_RTTUNIT() {
        return RTM_RTTUNIT;
    }

    private static final int RTF_UP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define RTF_UP 1
     * }
     */
    public static int RTF_UP() {
        return RTF_UP;
    }

    private static final int RTF_GATEWAY = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define RTF_GATEWAY 2
     * }
     */
    public static int RTF_GATEWAY() {
        return RTF_GATEWAY;
    }

    private static final int RTF_HOST = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define RTF_HOST 4
     * }
     */
    public static int RTF_HOST() {
        return RTF_HOST;
    }

    private static final int RTF_REJECT = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define RTF_REJECT 8
     * }
     */
    public static int RTF_REJECT() {
        return RTF_REJECT;
    }

    private static final int RTF_DYNAMIC = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define RTF_DYNAMIC 16
     * }
     */
    public static int RTF_DYNAMIC() {
        return RTF_DYNAMIC;
    }

    private static final int RTF_MODIFIED = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define RTF_MODIFIED 32
     * }
     */
    public static int RTF_MODIFIED() {
        return RTF_MODIFIED;
    }

    private static final int RTF_DONE = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define RTF_DONE 64
     * }
     */
    public static int RTF_DONE() {
        return RTF_DONE;
    }

    private static final int RTF_DELCLONE = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define RTF_DELCLONE 128
     * }
     */
    public static int RTF_DELCLONE() {
        return RTF_DELCLONE;
    }

    private static final int RTF_CLONING = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define RTF_CLONING 256
     * }
     */
    public static int RTF_CLONING() {
        return RTF_CLONING;
    }

    private static final int RTF_XRESOLVE = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define RTF_XRESOLVE 512
     * }
     */
    public static int RTF_XRESOLVE() {
        return RTF_XRESOLVE;
    }

    private static final int RTF_LLINFO = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define RTF_LLINFO 1024
     * }
     */
    public static int RTF_LLINFO() {
        return RTF_LLINFO;
    }

    private static final int RTF_STATIC = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define RTF_STATIC 2048
     * }
     */
    public static int RTF_STATIC() {
        return RTF_STATIC;
    }

    private static final int RTF_BLACKHOLE = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define RTF_BLACKHOLE 4096
     * }
     */
    public static int RTF_BLACKHOLE() {
        return RTF_BLACKHOLE;
    }

    private static final int RTF_NOIFREF = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define RTF_NOIFREF 8192
     * }
     */
    public static int RTF_NOIFREF() {
        return RTF_NOIFREF;
    }

    private static final int RTF_PROTO2 = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define RTF_PROTO2 16384
     * }
     */
    public static int RTF_PROTO2() {
        return RTF_PROTO2;
    }

    private static final int RTF_PROTO1 = (int) 32768L;
    /**
     * {@snippet lang=c :
     * #define RTF_PROTO1 32768
     * }
     */
    public static int RTF_PROTO1() {
        return RTF_PROTO1;
    }

    private static final int RTF_PRCLONING = (int) 65536L;
    /**
     * {@snippet lang=c :
     * #define RTF_PRCLONING 65536
     * }
     */
    public static int RTF_PRCLONING() {
        return RTF_PRCLONING;
    }

    private static final int RTF_WASCLONED = (int) 131072L;
    /**
     * {@snippet lang=c :
     * #define RTF_WASCLONED 131072
     * }
     */
    public static int RTF_WASCLONED() {
        return RTF_WASCLONED;
    }

    private static final int RTF_PROTO3 = (int) 262144L;
    /**
     * {@snippet lang=c :
     * #define RTF_PROTO3 262144
     * }
     */
    public static int RTF_PROTO3() {
        return RTF_PROTO3;
    }

    private static final int RTF_PINNED = (int) 1048576L;
    /**
     * {@snippet lang=c :
     * #define RTF_PINNED 1048576
     * }
     */
    public static int RTF_PINNED() {
        return RTF_PINNED;
    }

    private static final int RTF_LOCAL = (int) 2097152L;
    /**
     * {@snippet lang=c :
     * #define RTF_LOCAL 2097152
     * }
     */
    public static int RTF_LOCAL() {
        return RTF_LOCAL;
    }

    private static final int RTF_BROADCAST = (int) 4194304L;
    /**
     * {@snippet lang=c :
     * #define RTF_BROADCAST 4194304
     * }
     */
    public static int RTF_BROADCAST() {
        return RTF_BROADCAST;
    }

    private static final int RTF_MULTICAST = (int) 8388608L;
    /**
     * {@snippet lang=c :
     * #define RTF_MULTICAST 8388608
     * }
     */
    public static int RTF_MULTICAST() {
        return RTF_MULTICAST;
    }

    private static final int RTF_IFSCOPE = (int) 16777216L;
    /**
     * {@snippet lang=c :
     * #define RTF_IFSCOPE 16777216
     * }
     */
    public static int RTF_IFSCOPE() {
        return RTF_IFSCOPE;
    }

    private static final int RTF_CONDEMNED = (int) 33554432L;
    /**
     * {@snippet lang=c :
     * #define RTF_CONDEMNED 33554432
     * }
     */
    public static int RTF_CONDEMNED() {
        return RTF_CONDEMNED;
    }

    private static final int RTF_IFREF = (int) 67108864L;
    /**
     * {@snippet lang=c :
     * #define RTF_IFREF 67108864
     * }
     */
    public static int RTF_IFREF() {
        return RTF_IFREF;
    }

    private static final int RTF_PROXY = (int) 134217728L;
    /**
     * {@snippet lang=c :
     * #define RTF_PROXY 134217728
     * }
     */
    public static int RTF_PROXY() {
        return RTF_PROXY;
    }

    private static final int RTF_ROUTER = (int) 268435456L;
    /**
     * {@snippet lang=c :
     * #define RTF_ROUTER 268435456
     * }
     */
    public static int RTF_ROUTER() {
        return RTF_ROUTER;
    }

    private static final int RTF_DEAD = (int) 536870912L;
    /**
     * {@snippet lang=c :
     * #define RTF_DEAD 536870912
     * }
     */
    public static int RTF_DEAD() {
        return RTF_DEAD;
    }

    private static final int RTF_GLOBAL = (int) 1073741824L;
    /**
     * {@snippet lang=c :
     * #define RTF_GLOBAL 1073741824
     * }
     */
    public static int RTF_GLOBAL() {
        return RTF_GLOBAL;
    }

    private static final int RTM_VERSION = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define RTM_VERSION 5
     * }
     */
    public static int RTM_VERSION() {
        return RTM_VERSION;
    }

    private static final int RTM_ADD = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define RTM_ADD 1
     * }
     */
    public static int RTM_ADD() {
        return RTM_ADD;
    }

    private static final int RTM_DELETE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define RTM_DELETE 2
     * }
     */
    public static int RTM_DELETE() {
        return RTM_DELETE;
    }

    private static final int RTM_CHANGE = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define RTM_CHANGE 3
     * }
     */
    public static int RTM_CHANGE() {
        return RTM_CHANGE;
    }

    private static final int RTM_GET = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define RTM_GET 4
     * }
     */
    public static int RTM_GET() {
        return RTM_GET;
    }

    private static final int RTM_LOSING = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define RTM_LOSING 5
     * }
     */
    public static int RTM_LOSING() {
        return RTM_LOSING;
    }

    private static final int RTM_REDIRECT = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define RTM_REDIRECT 6
     * }
     */
    public static int RTM_REDIRECT() {
        return RTM_REDIRECT;
    }

    private static final int RTM_MISS = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define RTM_MISS 7
     * }
     */
    public static int RTM_MISS() {
        return RTM_MISS;
    }

    private static final int RTM_LOCK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define RTM_LOCK 8
     * }
     */
    public static int RTM_LOCK() {
        return RTM_LOCK;
    }

    private static final int RTM_OLDADD = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define RTM_OLDADD 9
     * }
     */
    public static int RTM_OLDADD() {
        return RTM_OLDADD;
    }

    private static final int RTM_OLDDEL = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define RTM_OLDDEL 10
     * }
     */
    public static int RTM_OLDDEL() {
        return RTM_OLDDEL;
    }

    private static final int RTM_RESOLVE = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define RTM_RESOLVE 11
     * }
     */
    public static int RTM_RESOLVE() {
        return RTM_RESOLVE;
    }

    private static final int RTM_NEWADDR = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define RTM_NEWADDR 12
     * }
     */
    public static int RTM_NEWADDR() {
        return RTM_NEWADDR;
    }

    private static final int RTM_DELADDR = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define RTM_DELADDR 13
     * }
     */
    public static int RTM_DELADDR() {
        return RTM_DELADDR;
    }

    private static final int RTM_IFINFO = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define RTM_IFINFO 14
     * }
     */
    public static int RTM_IFINFO() {
        return RTM_IFINFO;
    }

    private static final int RTM_NEWMADDR = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define RTM_NEWMADDR 15
     * }
     */
    public static int RTM_NEWMADDR() {
        return RTM_NEWMADDR;
    }

    private static final int RTM_DELMADDR = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define RTM_DELMADDR 16
     * }
     */
    public static int RTM_DELMADDR() {
        return RTM_DELMADDR;
    }

    private static final int RTM_IFINFO2 = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define RTM_IFINFO2 18
     * }
     */
    public static int RTM_IFINFO2() {
        return RTM_IFINFO2;
    }

    private static final int RTM_NEWMADDR2 = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define RTM_NEWMADDR2 19
     * }
     */
    public static int RTM_NEWMADDR2() {
        return RTM_NEWMADDR2;
    }

    private static final int RTM_GET2 = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define RTM_GET2 20
     * }
     */
    public static int RTM_GET2() {
        return RTM_GET2;
    }

    private static final int RTV_MTU = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define RTV_MTU 1
     * }
     */
    public static int RTV_MTU() {
        return RTV_MTU;
    }

    private static final int RTV_HOPCOUNT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define RTV_HOPCOUNT 2
     * }
     */
    public static int RTV_HOPCOUNT() {
        return RTV_HOPCOUNT;
    }

    private static final int RTV_EXPIRE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define RTV_EXPIRE 4
     * }
     */
    public static int RTV_EXPIRE() {
        return RTV_EXPIRE;
    }

    private static final int RTV_RPIPE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define RTV_RPIPE 8
     * }
     */
    public static int RTV_RPIPE() {
        return RTV_RPIPE;
    }

    private static final int RTV_SPIPE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define RTV_SPIPE 16
     * }
     */
    public static int RTV_SPIPE() {
        return RTV_SPIPE;
    }

    private static final int RTV_SSTHRESH = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define RTV_SSTHRESH 32
     * }
     */
    public static int RTV_SSTHRESH() {
        return RTV_SSTHRESH;
    }

    private static final int RTV_RTT = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define RTV_RTT 64
     * }
     */
    public static int RTV_RTT() {
        return RTV_RTT;
    }

    private static final int RTV_RTTVAR = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define RTV_RTTVAR 128
     * }
     */
    public static int RTV_RTTVAR() {
        return RTV_RTTVAR;
    }

    private static final int RTA_DST = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define RTA_DST 1
     * }
     */
    public static int RTA_DST() {
        return RTA_DST;
    }

    private static final int RTA_GATEWAY = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define RTA_GATEWAY 2
     * }
     */
    public static int RTA_GATEWAY() {
        return RTA_GATEWAY;
    }

    private static final int RTA_NETMASK = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define RTA_NETMASK 4
     * }
     */
    public static int RTA_NETMASK() {
        return RTA_NETMASK;
    }

    private static final int RTA_GENMASK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define RTA_GENMASK 8
     * }
     */
    public static int RTA_GENMASK() {
        return RTA_GENMASK;
    }

    private static final int RTA_IFP = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define RTA_IFP 16
     * }
     */
    public static int RTA_IFP() {
        return RTA_IFP;
    }

    private static final int RTA_IFA = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define RTA_IFA 32
     * }
     */
    public static int RTA_IFA() {
        return RTA_IFA;
    }

    private static final int RTA_AUTHOR = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define RTA_AUTHOR 64
     * }
     */
    public static int RTA_AUTHOR() {
        return RTA_AUTHOR;
    }

    private static final int RTA_BRD = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define RTA_BRD 128
     * }
     */
    public static int RTA_BRD() {
        return RTA_BRD;
    }

    private static final int RTAX_DST = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define RTAX_DST 0
     * }
     */
    public static int RTAX_DST() {
        return RTAX_DST;
    }

    private static final int RTAX_GATEWAY = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define RTAX_GATEWAY 1
     * }
     */
    public static int RTAX_GATEWAY() {
        return RTAX_GATEWAY;
    }

    private static final int RTAX_NETMASK = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define RTAX_NETMASK 2
     * }
     */
    public static int RTAX_NETMASK() {
        return RTAX_NETMASK;
    }

    private static final int RTAX_GENMASK = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define RTAX_GENMASK 3
     * }
     */
    public static int RTAX_GENMASK() {
        return RTAX_GENMASK;
    }

    private static final int RTAX_IFP = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define RTAX_IFP 4
     * }
     */
    public static int RTAX_IFP() {
        return RTAX_IFP;
    }

    private static final int RTAX_IFA = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define RTAX_IFA 5
     * }
     */
    public static int RTAX_IFA() {
        return RTAX_IFA;
    }

    private static final int RTAX_AUTHOR = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define RTAX_AUTHOR 6
     * }
     */
    public static int RTAX_AUTHOR() {
        return RTAX_AUTHOR;
    }

    private static final int RTAX_BRD = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define RTAX_BRD 7
     * }
     */
    public static int RTAX_BRD() {
        return RTAX_BRD;
    }

    private static final int RTAX_MAX = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define RTAX_MAX 8
     * }
     */
    public static int RTAX_MAX() {
        return RTAX_MAX;
    }

    private static final int IPPROTO_IP = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IP 0
     * }
     */
    public static int IPPROTO_IP() {
        return IPPROTO_IP;
    }

    private static final int IPPROTO_HOPOPTS = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_HOPOPTS 0
     * }
     */
    public static int IPPROTO_HOPOPTS() {
        return IPPROTO_HOPOPTS;
    }

    private static final int IPPROTO_ICMP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ICMP 1
     * }
     */
    public static int IPPROTO_ICMP() {
        return IPPROTO_ICMP;
    }

    private static final int IPPROTO_IGMP = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IGMP 2
     * }
     */
    public static int IPPROTO_IGMP() {
        return IPPROTO_IGMP;
    }

    private static final int IPPROTO_GGP = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_GGP 3
     * }
     */
    public static int IPPROTO_GGP() {
        return IPPROTO_GGP;
    }

    private static final int IPPROTO_IPV4 = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPV4 4
     * }
     */
    public static int IPPROTO_IPV4() {
        return IPPROTO_IPV4;
    }

    private static final int IPPROTO_TCP = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TCP 6
     * }
     */
    public static int IPPROTO_TCP() {
        return IPPROTO_TCP;
    }

    private static final int IPPROTO_ST = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ST 7
     * }
     */
    public static int IPPROTO_ST() {
        return IPPROTO_ST;
    }

    private static final int IPPROTO_EGP = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_EGP 8
     * }
     */
    public static int IPPROTO_EGP() {
        return IPPROTO_EGP;
    }

    private static final int IPPROTO_PIGP = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PIGP 9
     * }
     */
    public static int IPPROTO_PIGP() {
        return IPPROTO_PIGP;
    }

    private static final int IPPROTO_RCCMON = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RCCMON 10
     * }
     */
    public static int IPPROTO_RCCMON() {
        return IPPROTO_RCCMON;
    }

    private static final int IPPROTO_NVPII = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_NVPII 11
     * }
     */
    public static int IPPROTO_NVPII() {
        return IPPROTO_NVPII;
    }

    private static final int IPPROTO_PUP = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PUP 12
     * }
     */
    public static int IPPROTO_PUP() {
        return IPPROTO_PUP;
    }

    private static final int IPPROTO_ARGUS = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ARGUS 13
     * }
     */
    public static int IPPROTO_ARGUS() {
        return IPPROTO_ARGUS;
    }

    private static final int IPPROTO_EMCON = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_EMCON 14
     * }
     */
    public static int IPPROTO_EMCON() {
        return IPPROTO_EMCON;
    }

    private static final int IPPROTO_XNET = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_XNET 15
     * }
     */
    public static int IPPROTO_XNET() {
        return IPPROTO_XNET;
    }

    private static final int IPPROTO_CHAOS = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_CHAOS 16
     * }
     */
    public static int IPPROTO_CHAOS() {
        return IPPROTO_CHAOS;
    }

    private static final int IPPROTO_UDP = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_UDP 17
     * }
     */
    public static int IPPROTO_UDP() {
        return IPPROTO_UDP;
    }

    private static final int IPPROTO_MUX = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MUX 18
     * }
     */
    public static int IPPROTO_MUX() {
        return IPPROTO_MUX;
    }

    private static final int IPPROTO_MEAS = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MEAS 19
     * }
     */
    public static int IPPROTO_MEAS() {
        return IPPROTO_MEAS;
    }

    private static final int IPPROTO_HMP = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_HMP 20
     * }
     */
    public static int IPPROTO_HMP() {
        return IPPROTO_HMP;
    }

    private static final int IPPROTO_PRM = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PRM 21
     * }
     */
    public static int IPPROTO_PRM() {
        return IPPROTO_PRM;
    }

    private static final int IPPROTO_IDP = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IDP 22
     * }
     */
    public static int IPPROTO_IDP() {
        return IPPROTO_IDP;
    }

    private static final int IPPROTO_TRUNK1 = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TRUNK1 23
     * }
     */
    public static int IPPROTO_TRUNK1() {
        return IPPROTO_TRUNK1;
    }

    private static final int IPPROTO_TRUNK2 = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TRUNK2 24
     * }
     */
    public static int IPPROTO_TRUNK2() {
        return IPPROTO_TRUNK2;
    }

    private static final int IPPROTO_LEAF1 = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_LEAF1 25
     * }
     */
    public static int IPPROTO_LEAF1() {
        return IPPROTO_LEAF1;
    }

    private static final int IPPROTO_LEAF2 = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_LEAF2 26
     * }
     */
    public static int IPPROTO_LEAF2() {
        return IPPROTO_LEAF2;
    }

    private static final int IPPROTO_RDP = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RDP 27
     * }
     */
    public static int IPPROTO_RDP() {
        return IPPROTO_RDP;
    }

    private static final int IPPROTO_IRTP = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IRTP 28
     * }
     */
    public static int IPPROTO_IRTP() {
        return IPPROTO_IRTP;
    }

    private static final int IPPROTO_TP = (int) 29L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TP 29
     * }
     */
    public static int IPPROTO_TP() {
        return IPPROTO_TP;
    }

    private static final int IPPROTO_BLT = (int) 30L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_BLT 30
     * }
     */
    public static int IPPROTO_BLT() {
        return IPPROTO_BLT;
    }

    private static final int IPPROTO_NSP = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_NSP 31
     * }
     */
    public static int IPPROTO_NSP() {
        return IPPROTO_NSP;
    }

    private static final int IPPROTO_INP = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_INP 32
     * }
     */
    public static int IPPROTO_INP() {
        return IPPROTO_INP;
    }

    private static final int IPPROTO_SEP = (int) 33L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SEP 33
     * }
     */
    public static int IPPROTO_SEP() {
        return IPPROTO_SEP;
    }

    private static final int IPPROTO_3PC = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_3PC 34
     * }
     */
    public static int IPPROTO_3PC() {
        return IPPROTO_3PC;
    }

    private static final int IPPROTO_IDPR = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IDPR 35
     * }
     */
    public static int IPPROTO_IDPR() {
        return IPPROTO_IDPR;
    }

    private static final int IPPROTO_XTP = (int) 36L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_XTP 36
     * }
     */
    public static int IPPROTO_XTP() {
        return IPPROTO_XTP;
    }

    private static final int IPPROTO_DDP = (int) 37L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_DDP 37
     * }
     */
    public static int IPPROTO_DDP() {
        return IPPROTO_DDP;
    }

    private static final int IPPROTO_CMTP = (int) 38L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_CMTP 38
     * }
     */
    public static int IPPROTO_CMTP() {
        return IPPROTO_CMTP;
    }

    private static final int IPPROTO_TPXX = (int) 39L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TPXX 39
     * }
     */
    public static int IPPROTO_TPXX() {
        return IPPROTO_TPXX;
    }

    private static final int IPPROTO_IL = (int) 40L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IL 40
     * }
     */
    public static int IPPROTO_IL() {
        return IPPROTO_IL;
    }

    private static final int IPPROTO_IPV6 = (int) 41L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPV6 41
     * }
     */
    public static int IPPROTO_IPV6() {
        return IPPROTO_IPV6;
    }

    private static final int IPPROTO_SDRP = (int) 42L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SDRP 42
     * }
     */
    public static int IPPROTO_SDRP() {
        return IPPROTO_SDRP;
    }

    private static final int IPPROTO_ROUTING = (int) 43L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ROUTING 43
     * }
     */
    public static int IPPROTO_ROUTING() {
        return IPPROTO_ROUTING;
    }

    private static final int IPPROTO_FRAGMENT = (int) 44L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_FRAGMENT 44
     * }
     */
    public static int IPPROTO_FRAGMENT() {
        return IPPROTO_FRAGMENT;
    }

    private static final int IPPROTO_IDRP = (int) 45L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IDRP 45
     * }
     */
    public static int IPPROTO_IDRP() {
        return IPPROTO_IDRP;
    }

    private static final int IPPROTO_RSVP = (int) 46L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RSVP 46
     * }
     */
    public static int IPPROTO_RSVP() {
        return IPPROTO_RSVP;
    }

    private static final int IPPROTO_GRE = (int) 47L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_GRE 47
     * }
     */
    public static int IPPROTO_GRE() {
        return IPPROTO_GRE;
    }

    private static final int IPPROTO_MHRP = (int) 48L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MHRP 48
     * }
     */
    public static int IPPROTO_MHRP() {
        return IPPROTO_MHRP;
    }

    private static final int IPPROTO_BHA = (int) 49L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_BHA 49
     * }
     */
    public static int IPPROTO_BHA() {
        return IPPROTO_BHA;
    }

    private static final int IPPROTO_ESP = (int) 50L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ESP 50
     * }
     */
    public static int IPPROTO_ESP() {
        return IPPROTO_ESP;
    }

    private static final int IPPROTO_AH = (int) 51L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_AH 51
     * }
     */
    public static int IPPROTO_AH() {
        return IPPROTO_AH;
    }

    private static final int IPPROTO_INLSP = (int) 52L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_INLSP 52
     * }
     */
    public static int IPPROTO_INLSP() {
        return IPPROTO_INLSP;
    }

    private static final int IPPROTO_SWIPE = (int) 53L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SWIPE 53
     * }
     */
    public static int IPPROTO_SWIPE() {
        return IPPROTO_SWIPE;
    }

    private static final int IPPROTO_NHRP = (int) 54L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_NHRP 54
     * }
     */
    public static int IPPROTO_NHRP() {
        return IPPROTO_NHRP;
    }

    private static final int IPPROTO_ICMPV6 = (int) 58L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ICMPV6 58
     * }
     */
    public static int IPPROTO_ICMPV6() {
        return IPPROTO_ICMPV6;
    }

    private static final int IPPROTO_NONE = (int) 59L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_NONE 59
     * }
     */
    public static int IPPROTO_NONE() {
        return IPPROTO_NONE;
    }

    private static final int IPPROTO_DSTOPTS = (int) 60L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_DSTOPTS 60
     * }
     */
    public static int IPPROTO_DSTOPTS() {
        return IPPROTO_DSTOPTS;
    }

    private static final int IPPROTO_AHIP = (int) 61L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_AHIP 61
     * }
     */
    public static int IPPROTO_AHIP() {
        return IPPROTO_AHIP;
    }

    private static final int IPPROTO_CFTP = (int) 62L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_CFTP 62
     * }
     */
    public static int IPPROTO_CFTP() {
        return IPPROTO_CFTP;
    }

    private static final int IPPROTO_HELLO = (int) 63L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_HELLO 63
     * }
     */
    public static int IPPROTO_HELLO() {
        return IPPROTO_HELLO;
    }

    private static final int IPPROTO_SATEXPAK = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SATEXPAK 64
     * }
     */
    public static int IPPROTO_SATEXPAK() {
        return IPPROTO_SATEXPAK;
    }

    private static final int IPPROTO_KRYPTOLAN = (int) 65L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_KRYPTOLAN 65
     * }
     */
    public static int IPPROTO_KRYPTOLAN() {
        return IPPROTO_KRYPTOLAN;
    }

    private static final int IPPROTO_RVD = (int) 66L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RVD 66
     * }
     */
    public static int IPPROTO_RVD() {
        return IPPROTO_RVD;
    }

    private static final int IPPROTO_IPPC = (int) 67L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPPC 67
     * }
     */
    public static int IPPROTO_IPPC() {
        return IPPROTO_IPPC;
    }

    private static final int IPPROTO_ADFS = (int) 68L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ADFS 68
     * }
     */
    public static int IPPROTO_ADFS() {
        return IPPROTO_ADFS;
    }

    private static final int IPPROTO_SATMON = (int) 69L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SATMON 69
     * }
     */
    public static int IPPROTO_SATMON() {
        return IPPROTO_SATMON;
    }

    private static final int IPPROTO_VISA = (int) 70L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_VISA 70
     * }
     */
    public static int IPPROTO_VISA() {
        return IPPROTO_VISA;
    }

    private static final int IPPROTO_IPCV = (int) 71L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPCV 71
     * }
     */
    public static int IPPROTO_IPCV() {
        return IPPROTO_IPCV;
    }

    private static final int IPPROTO_CPNX = (int) 72L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_CPNX 72
     * }
     */
    public static int IPPROTO_CPNX() {
        return IPPROTO_CPNX;
    }

    private static final int IPPROTO_CPHB = (int) 73L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_CPHB 73
     * }
     */
    public static int IPPROTO_CPHB() {
        return IPPROTO_CPHB;
    }

    private static final int IPPROTO_WSN = (int) 74L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_WSN 74
     * }
     */
    public static int IPPROTO_WSN() {
        return IPPROTO_WSN;
    }

    private static final int IPPROTO_PVP = (int) 75L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PVP 75
     * }
     */
    public static int IPPROTO_PVP() {
        return IPPROTO_PVP;
    }

    private static final int IPPROTO_BRSATMON = (int) 76L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_BRSATMON 76
     * }
     */
    public static int IPPROTO_BRSATMON() {
        return IPPROTO_BRSATMON;
    }

    private static final int IPPROTO_ND = (int) 77L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ND 77
     * }
     */
    public static int IPPROTO_ND() {
        return IPPROTO_ND;
    }

    private static final int IPPROTO_WBMON = (int) 78L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_WBMON 78
     * }
     */
    public static int IPPROTO_WBMON() {
        return IPPROTO_WBMON;
    }

    private static final int IPPROTO_WBEXPAK = (int) 79L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_WBEXPAK 79
     * }
     */
    public static int IPPROTO_WBEXPAK() {
        return IPPROTO_WBEXPAK;
    }

    private static final int IPPROTO_EON = (int) 80L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_EON 80
     * }
     */
    public static int IPPROTO_EON() {
        return IPPROTO_EON;
    }

    private static final int IPPROTO_VMTP = (int) 81L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_VMTP 81
     * }
     */
    public static int IPPROTO_VMTP() {
        return IPPROTO_VMTP;
    }

    private static final int IPPROTO_SVMTP = (int) 82L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SVMTP 82
     * }
     */
    public static int IPPROTO_SVMTP() {
        return IPPROTO_SVMTP;
    }

    private static final int IPPROTO_VINES = (int) 83L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_VINES 83
     * }
     */
    public static int IPPROTO_VINES() {
        return IPPROTO_VINES;
    }

    private static final int IPPROTO_TTP = (int) 84L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TTP 84
     * }
     */
    public static int IPPROTO_TTP() {
        return IPPROTO_TTP;
    }

    private static final int IPPROTO_IGP = (int) 85L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IGP 85
     * }
     */
    public static int IPPROTO_IGP() {
        return IPPROTO_IGP;
    }

    private static final int IPPROTO_DGP = (int) 86L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_DGP 86
     * }
     */
    public static int IPPROTO_DGP() {
        return IPPROTO_DGP;
    }

    private static final int IPPROTO_TCF = (int) 87L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TCF 87
     * }
     */
    public static int IPPROTO_TCF() {
        return IPPROTO_TCF;
    }

    private static final int IPPROTO_IGRP = (int) 88L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IGRP 88
     * }
     */
    public static int IPPROTO_IGRP() {
        return IPPROTO_IGRP;
    }

    private static final int IPPROTO_OSPFIGP = (int) 89L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_OSPFIGP 89
     * }
     */
    public static int IPPROTO_OSPFIGP() {
        return IPPROTO_OSPFIGP;
    }

    private static final int IPPROTO_SRPC = (int) 90L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SRPC 90
     * }
     */
    public static int IPPROTO_SRPC() {
        return IPPROTO_SRPC;
    }

    private static final int IPPROTO_LARP = (int) 91L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_LARP 91
     * }
     */
    public static int IPPROTO_LARP() {
        return IPPROTO_LARP;
    }

    private static final int IPPROTO_MTP = (int) 92L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MTP 92
     * }
     */
    public static int IPPROTO_MTP() {
        return IPPROTO_MTP;
    }

    private static final int IPPROTO_AX25 = (int) 93L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_AX25 93
     * }
     */
    public static int IPPROTO_AX25() {
        return IPPROTO_AX25;
    }

    private static final int IPPROTO_IPEIP = (int) 94L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPEIP 94
     * }
     */
    public static int IPPROTO_IPEIP() {
        return IPPROTO_IPEIP;
    }

    private static final int IPPROTO_MICP = (int) 95L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MICP 95
     * }
     */
    public static int IPPROTO_MICP() {
        return IPPROTO_MICP;
    }

    private static final int IPPROTO_SCCSP = (int) 96L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SCCSP 96
     * }
     */
    public static int IPPROTO_SCCSP() {
        return IPPROTO_SCCSP;
    }

    private static final int IPPROTO_ETHERIP = (int) 97L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ETHERIP 97
     * }
     */
    public static int IPPROTO_ETHERIP() {
        return IPPROTO_ETHERIP;
    }

    private static final int IPPROTO_ENCAP = (int) 98L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ENCAP 98
     * }
     */
    public static int IPPROTO_ENCAP() {
        return IPPROTO_ENCAP;
    }

    private static final int IPPROTO_APES = (int) 99L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_APES 99
     * }
     */
    public static int IPPROTO_APES() {
        return IPPROTO_APES;
    }

    private static final int IPPROTO_GMTP = (int) 100L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_GMTP 100
     * }
     */
    public static int IPPROTO_GMTP() {
        return IPPROTO_GMTP;
    }

    private static final int IPPROTO_PIM = (int) 103L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PIM 103
     * }
     */
    public static int IPPROTO_PIM() {
        return IPPROTO_PIM;
    }

    private static final int IPPROTO_IPCOMP = (int) 108L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IPCOMP 108
     * }
     */
    public static int IPPROTO_IPCOMP() {
        return IPPROTO_IPCOMP;
    }

    private static final int IPPROTO_PGM = (int) 113L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PGM 113
     * }
     */
    public static int IPPROTO_PGM() {
        return IPPROTO_PGM;
    }

    private static final int IPPROTO_SCTP = (int) 132L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_SCTP 132
     * }
     */
    public static int IPPROTO_SCTP() {
        return IPPROTO_SCTP;
    }

    private static final int IPPROTO_DIVERT = (int) 254L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_DIVERT 254
     * }
     */
    public static int IPPROTO_DIVERT() {
        return IPPROTO_DIVERT;
    }

    private static final int IPPROTO_RAW = (int) 255L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RAW 255
     * }
     */
    public static int IPPROTO_RAW() {
        return IPPROTO_RAW;
    }

    private static final int IPPROTO_MAX = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MAX 256
     * }
     */
    public static int IPPROTO_MAX() {
        return IPPROTO_MAX;
    }

    private static final int IPPROTO_DONE = (int) 257L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_DONE 257
     * }
     */
    public static int IPPROTO_DONE() {
        return IPPROTO_DONE;
    }

    private static final int __DARWIN_IPPORT_RESERVED = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_IPPORT_RESERVED 1024
     * }
     */
    public static int __DARWIN_IPPORT_RESERVED() {
        return __DARWIN_IPPORT_RESERVED;
    }

    private static final int IPPORT_USERRESERVED = (int) 5000L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_USERRESERVED 5000
     * }
     */
    public static int IPPORT_USERRESERVED() {
        return IPPORT_USERRESERVED;
    }

    private static final int IPPORT_HIFIRSTAUTO = (int) 49152L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_HIFIRSTAUTO 49152
     * }
     */
    public static int IPPORT_HIFIRSTAUTO() {
        return IPPORT_HIFIRSTAUTO;
    }

    private static final int IPPORT_HILASTAUTO = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_HILASTAUTO 65535
     * }
     */
    public static int IPPORT_HILASTAUTO() {
        return IPPORT_HILASTAUTO;
    }

    private static final int IPPORT_RESERVEDSTART = (int) 600L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_RESERVEDSTART 600
     * }
     */
    public static int IPPORT_RESERVEDSTART() {
        return IPPORT_RESERVEDSTART;
    }

    private static final int IN_CLASSA_NSHIFT = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_NSHIFT 24
     * }
     */
    public static int IN_CLASSA_NSHIFT() {
        return IN_CLASSA_NSHIFT;
    }

    private static final int IN_CLASSA_HOST = (int) 16777215L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_HOST 16777215
     * }
     */
    public static int IN_CLASSA_HOST() {
        return IN_CLASSA_HOST;
    }

    private static final int IN_CLASSA_MAX = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_MAX 128
     * }
     */
    public static int IN_CLASSA_MAX() {
        return IN_CLASSA_MAX;
    }

    private static final int IN_CLASSB_NSHIFT = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_NSHIFT 16
     * }
     */
    public static int IN_CLASSB_NSHIFT() {
        return IN_CLASSB_NSHIFT;
    }

    private static final int IN_CLASSB_HOST = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_HOST 65535
     * }
     */
    public static int IN_CLASSB_HOST() {
        return IN_CLASSB_HOST;
    }

    private static final int IN_CLASSB_MAX = (int) 65536L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_MAX 65536
     * }
     */
    public static int IN_CLASSB_MAX() {
        return IN_CLASSB_MAX;
    }

    private static final int IN_CLASSC_NSHIFT = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_NSHIFT 8
     * }
     */
    public static int IN_CLASSC_NSHIFT() {
        return IN_CLASSC_NSHIFT;
    }

    private static final int IN_CLASSC_HOST = (int) 255L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_HOST 255
     * }
     */
    public static int IN_CLASSC_HOST() {
        return IN_CLASSC_HOST;
    }

    private static final int IN_CLASSD_NSHIFT = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSD_NSHIFT 28
     * }
     */
    public static int IN_CLASSD_NSHIFT() {
        return IN_CLASSD_NSHIFT;
    }

    private static final int IN_CLASSD_HOST = (int) 268435455L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSD_HOST 268435455
     * }
     */
    public static int IN_CLASSD_HOST() {
        return IN_CLASSD_HOST;
    }

    private static final int IN_LOOPBACKNET = (int) 127L;
    /**
     * {@snippet lang=c :
     * #define IN_LOOPBACKNET 127
     * }
     */
    public static int IN_LOOPBACKNET() {
        return IN_LOOPBACKNET;
    }

    private static final int INET_ADDRSTRLEN = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define INET_ADDRSTRLEN 16
     * }
     */
    public static int INET_ADDRSTRLEN() {
        return INET_ADDRSTRLEN;
    }

    private static final int IP_OPTIONS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IP_OPTIONS 1
     * }
     */
    public static int IP_OPTIONS() {
        return IP_OPTIONS;
    }

    private static final int IP_HDRINCL = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IP_HDRINCL 2
     * }
     */
    public static int IP_HDRINCL() {
        return IP_HDRINCL;
    }

    private static final int IP_TOS = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IP_TOS 3
     * }
     */
    public static int IP_TOS() {
        return IP_TOS;
    }

    private static final int IP_TTL = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IP_TTL 4
     * }
     */
    public static int IP_TTL() {
        return IP_TTL;
    }

    private static final int IP_RECVOPTS = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVOPTS 5
     * }
     */
    public static int IP_RECVOPTS() {
        return IP_RECVOPTS;
    }

    private static final int IP_RECVRETOPTS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVRETOPTS 6
     * }
     */
    public static int IP_RECVRETOPTS() {
        return IP_RECVRETOPTS;
    }

    private static final int IP_RECVDSTADDR = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVDSTADDR 7
     * }
     */
    public static int IP_RECVDSTADDR() {
        return IP_RECVDSTADDR;
    }

    private static final int IP_RETOPTS = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IP_RETOPTS 8
     * }
     */
    public static int IP_RETOPTS() {
        return IP_RETOPTS;
    }

    private static final int IP_MULTICAST_IF = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_IF 9
     * }
     */
    public static int IP_MULTICAST_IF() {
        return IP_MULTICAST_IF;
    }

    private static final int IP_MULTICAST_TTL = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_TTL 10
     * }
     */
    public static int IP_MULTICAST_TTL() {
        return IP_MULTICAST_TTL;
    }

    private static final int IP_MULTICAST_LOOP = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_LOOP 11
     * }
     */
    public static int IP_MULTICAST_LOOP() {
        return IP_MULTICAST_LOOP;
    }

    private static final int IP_ADD_MEMBERSHIP = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define IP_ADD_MEMBERSHIP 12
     * }
     */
    public static int IP_ADD_MEMBERSHIP() {
        return IP_ADD_MEMBERSHIP;
    }

    private static final int IP_DROP_MEMBERSHIP = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define IP_DROP_MEMBERSHIP 13
     * }
     */
    public static int IP_DROP_MEMBERSHIP() {
        return IP_DROP_MEMBERSHIP;
    }

    private static final int IP_MULTICAST_VIF = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_VIF 14
     * }
     */
    public static int IP_MULTICAST_VIF() {
        return IP_MULTICAST_VIF;
    }

    private static final int IP_RSVP_ON = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define IP_RSVP_ON 15
     * }
     */
    public static int IP_RSVP_ON() {
        return IP_RSVP_ON;
    }

    private static final int IP_RSVP_OFF = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IP_RSVP_OFF 16
     * }
     */
    public static int IP_RSVP_OFF() {
        return IP_RSVP_OFF;
    }

    private static final int IP_RSVP_VIF_ON = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define IP_RSVP_VIF_ON 17
     * }
     */
    public static int IP_RSVP_VIF_ON() {
        return IP_RSVP_VIF_ON;
    }

    private static final int IP_RSVP_VIF_OFF = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define IP_RSVP_VIF_OFF 18
     * }
     */
    public static int IP_RSVP_VIF_OFF() {
        return IP_RSVP_VIF_OFF;
    }

    private static final int IP_PORTRANGE = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define IP_PORTRANGE 19
     * }
     */
    public static int IP_PORTRANGE() {
        return IP_PORTRANGE;
    }

    private static final int IP_RECVIF = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVIF 20
     * }
     */
    public static int IP_RECVIF() {
        return IP_RECVIF;
    }

    private static final int IP_IPSEC_POLICY = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define IP_IPSEC_POLICY 21
     * }
     */
    public static int IP_IPSEC_POLICY() {
        return IP_IPSEC_POLICY;
    }

    private static final int IP_FAITH = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define IP_FAITH 22
     * }
     */
    public static int IP_FAITH() {
        return IP_FAITH;
    }

    private static final int IP_STRIPHDR = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define IP_STRIPHDR 23
     * }
     */
    public static int IP_STRIPHDR() {
        return IP_STRIPHDR;
    }

    private static final int IP_RECVTTL = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVTTL 24
     * }
     */
    public static int IP_RECVTTL() {
        return IP_RECVTTL;
    }

    private static final int IP_BOUND_IF = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define IP_BOUND_IF 25
     * }
     */
    public static int IP_BOUND_IF() {
        return IP_BOUND_IF;
    }

    private static final int IP_PKTINFO = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define IP_PKTINFO 26
     * }
     */
    public static int IP_PKTINFO() {
        return IP_PKTINFO;
    }

    private static final int IP_RECVTOS = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define IP_RECVTOS 27
     * }
     */
    public static int IP_RECVTOS() {
        return IP_RECVTOS;
    }

    private static final int IP_DONTFRAG = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define IP_DONTFRAG 28
     * }
     */
    public static int IP_DONTFRAG() {
        return IP_DONTFRAG;
    }

    private static final int IP_FW_ADD = (int) 40L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_ADD 40
     * }
     */
    public static int IP_FW_ADD() {
        return IP_FW_ADD;
    }

    private static final int IP_FW_DEL = (int) 41L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_DEL 41
     * }
     */
    public static int IP_FW_DEL() {
        return IP_FW_DEL;
    }

    private static final int IP_FW_FLUSH = (int) 42L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_FLUSH 42
     * }
     */
    public static int IP_FW_FLUSH() {
        return IP_FW_FLUSH;
    }

    private static final int IP_FW_ZERO = (int) 43L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_ZERO 43
     * }
     */
    public static int IP_FW_ZERO() {
        return IP_FW_ZERO;
    }

    private static final int IP_FW_GET = (int) 44L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_GET 44
     * }
     */
    public static int IP_FW_GET() {
        return IP_FW_GET;
    }

    private static final int IP_FW_RESETLOG = (int) 45L;
    /**
     * {@snippet lang=c :
     * #define IP_FW_RESETLOG 45
     * }
     */
    public static int IP_FW_RESETLOG() {
        return IP_FW_RESETLOG;
    }

    private static final int IP_OLD_FW_ADD = (int) 50L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_ADD 50
     * }
     */
    public static int IP_OLD_FW_ADD() {
        return IP_OLD_FW_ADD;
    }

    private static final int IP_OLD_FW_DEL = (int) 51L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_DEL 51
     * }
     */
    public static int IP_OLD_FW_DEL() {
        return IP_OLD_FW_DEL;
    }

    private static final int IP_OLD_FW_FLUSH = (int) 52L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_FLUSH 52
     * }
     */
    public static int IP_OLD_FW_FLUSH() {
        return IP_OLD_FW_FLUSH;
    }

    private static final int IP_OLD_FW_ZERO = (int) 53L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_ZERO 53
     * }
     */
    public static int IP_OLD_FW_ZERO() {
        return IP_OLD_FW_ZERO;
    }

    private static final int IP_OLD_FW_GET = (int) 54L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_GET 54
     * }
     */
    public static int IP_OLD_FW_GET() {
        return IP_OLD_FW_GET;
    }

    private static final int IP_NAT__XXX = (int) 55L;
    /**
     * {@snippet lang=c :
     * #define IP_NAT__XXX 55
     * }
     */
    public static int IP_NAT__XXX() {
        return IP_NAT__XXX;
    }

    private static final int IP_OLD_FW_RESETLOG = (int) 56L;
    /**
     * {@snippet lang=c :
     * #define IP_OLD_FW_RESETLOG 56
     * }
     */
    public static int IP_OLD_FW_RESETLOG() {
        return IP_OLD_FW_RESETLOG;
    }

    private static final int IP_DUMMYNET_CONFIGURE = (int) 60L;
    /**
     * {@snippet lang=c :
     * #define IP_DUMMYNET_CONFIGURE 60
     * }
     */
    public static int IP_DUMMYNET_CONFIGURE() {
        return IP_DUMMYNET_CONFIGURE;
    }

    private static final int IP_DUMMYNET_DEL = (int) 61L;
    /**
     * {@snippet lang=c :
     * #define IP_DUMMYNET_DEL 61
     * }
     */
    public static int IP_DUMMYNET_DEL() {
        return IP_DUMMYNET_DEL;
    }

    private static final int IP_DUMMYNET_FLUSH = (int) 62L;
    /**
     * {@snippet lang=c :
     * #define IP_DUMMYNET_FLUSH 62
     * }
     */
    public static int IP_DUMMYNET_FLUSH() {
        return IP_DUMMYNET_FLUSH;
    }

    private static final int IP_DUMMYNET_GET = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define IP_DUMMYNET_GET 64
     * }
     */
    public static int IP_DUMMYNET_GET() {
        return IP_DUMMYNET_GET;
    }

    private static final int IP_TRAFFIC_MGT_BACKGROUND = (int) 65L;
    /**
     * {@snippet lang=c :
     * #define IP_TRAFFIC_MGT_BACKGROUND 65
     * }
     */
    public static int IP_TRAFFIC_MGT_BACKGROUND() {
        return IP_TRAFFIC_MGT_BACKGROUND;
    }

    private static final int IP_MULTICAST_IFINDEX = (int) 66L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_IFINDEX 66
     * }
     */
    public static int IP_MULTICAST_IFINDEX() {
        return IP_MULTICAST_IFINDEX;
    }

    private static final int IP_ADD_SOURCE_MEMBERSHIP = (int) 70L;
    /**
     * {@snippet lang=c :
     * #define IP_ADD_SOURCE_MEMBERSHIP 70
     * }
     */
    public static int IP_ADD_SOURCE_MEMBERSHIP() {
        return IP_ADD_SOURCE_MEMBERSHIP;
    }

    private static final int IP_DROP_SOURCE_MEMBERSHIP = (int) 71L;
    /**
     * {@snippet lang=c :
     * #define IP_DROP_SOURCE_MEMBERSHIP 71
     * }
     */
    public static int IP_DROP_SOURCE_MEMBERSHIP() {
        return IP_DROP_SOURCE_MEMBERSHIP;
    }

    private static final int IP_BLOCK_SOURCE = (int) 72L;
    /**
     * {@snippet lang=c :
     * #define IP_BLOCK_SOURCE 72
     * }
     */
    public static int IP_BLOCK_SOURCE() {
        return IP_BLOCK_SOURCE;
    }

    private static final int IP_UNBLOCK_SOURCE = (int) 73L;
    /**
     * {@snippet lang=c :
     * #define IP_UNBLOCK_SOURCE 73
     * }
     */
    public static int IP_UNBLOCK_SOURCE() {
        return IP_UNBLOCK_SOURCE;
    }

    private static final int IP_MSFILTER = (int) 74L;
    /**
     * {@snippet lang=c :
     * #define IP_MSFILTER 74
     * }
     */
    public static int IP_MSFILTER() {
        return IP_MSFILTER;
    }

    private static final int MCAST_JOIN_GROUP = (int) 80L;
    /**
     * {@snippet lang=c :
     * #define MCAST_JOIN_GROUP 80
     * }
     */
    public static int MCAST_JOIN_GROUP() {
        return MCAST_JOIN_GROUP;
    }

    private static final int MCAST_LEAVE_GROUP = (int) 81L;
    /**
     * {@snippet lang=c :
     * #define MCAST_LEAVE_GROUP 81
     * }
     */
    public static int MCAST_LEAVE_GROUP() {
        return MCAST_LEAVE_GROUP;
    }

    private static final int MCAST_JOIN_SOURCE_GROUP = (int) 82L;
    /**
     * {@snippet lang=c :
     * #define MCAST_JOIN_SOURCE_GROUP 82
     * }
     */
    public static int MCAST_JOIN_SOURCE_GROUP() {
        return MCAST_JOIN_SOURCE_GROUP;
    }

    private static final int MCAST_LEAVE_SOURCE_GROUP = (int) 83L;
    /**
     * {@snippet lang=c :
     * #define MCAST_LEAVE_SOURCE_GROUP 83
     * }
     */
    public static int MCAST_LEAVE_SOURCE_GROUP() {
        return MCAST_LEAVE_SOURCE_GROUP;
    }

    private static final int MCAST_BLOCK_SOURCE = (int) 84L;
    /**
     * {@snippet lang=c :
     * #define MCAST_BLOCK_SOURCE 84
     * }
     */
    public static int MCAST_BLOCK_SOURCE() {
        return MCAST_BLOCK_SOURCE;
    }

    private static final int MCAST_UNBLOCK_SOURCE = (int) 85L;
    /**
     * {@snippet lang=c :
     * #define MCAST_UNBLOCK_SOURCE 85
     * }
     */
    public static int MCAST_UNBLOCK_SOURCE() {
        return MCAST_UNBLOCK_SOURCE;
    }

    private static final int IP_DEFAULT_MULTICAST_TTL = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_TTL 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_TTL() {
        return IP_DEFAULT_MULTICAST_TTL;
    }

    private static final int IP_DEFAULT_MULTICAST_LOOP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_LOOP 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_LOOP() {
        return IP_DEFAULT_MULTICAST_LOOP;
    }

    private static final int IP_MIN_MEMBERSHIPS = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define IP_MIN_MEMBERSHIPS 31
     * }
     */
    public static int IP_MIN_MEMBERSHIPS() {
        return IP_MIN_MEMBERSHIPS;
    }

    private static final int IP_MAX_MEMBERSHIPS = (int) 4095L;
    /**
     * {@snippet lang=c :
     * #define IP_MAX_MEMBERSHIPS 4095
     * }
     */
    public static int IP_MAX_MEMBERSHIPS() {
        return IP_MAX_MEMBERSHIPS;
    }

    private static final int IP_MAX_GROUP_SRC_FILTER = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define IP_MAX_GROUP_SRC_FILTER 512
     * }
     */
    public static int IP_MAX_GROUP_SRC_FILTER() {
        return IP_MAX_GROUP_SRC_FILTER;
    }

    private static final int IP_MAX_SOCK_SRC_FILTER = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IP_MAX_SOCK_SRC_FILTER 128
     * }
     */
    public static int IP_MAX_SOCK_SRC_FILTER() {
        return IP_MAX_SOCK_SRC_FILTER;
    }

    private static final int IP_MAX_SOCK_MUTE_FILTER = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IP_MAX_SOCK_MUTE_FILTER 128
     * }
     */
    public static int IP_MAX_SOCK_MUTE_FILTER() {
        return IP_MAX_SOCK_MUTE_FILTER;
    }

    private static final int MCAST_UNDEFINED = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define MCAST_UNDEFINED 0
     * }
     */
    public static int MCAST_UNDEFINED() {
        return MCAST_UNDEFINED;
    }

    private static final int MCAST_INCLUDE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define MCAST_INCLUDE 1
     * }
     */
    public static int MCAST_INCLUDE() {
        return MCAST_INCLUDE;
    }

    private static final int MCAST_EXCLUDE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define MCAST_EXCLUDE 2
     * }
     */
    public static int MCAST_EXCLUDE() {
        return MCAST_EXCLUDE;
    }

    private static final int IP_PORTRANGE_DEFAULT = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IP_PORTRANGE_DEFAULT 0
     * }
     */
    public static int IP_PORTRANGE_DEFAULT() {
        return IP_PORTRANGE_DEFAULT;
    }

    private static final int IP_PORTRANGE_HIGH = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IP_PORTRANGE_HIGH 1
     * }
     */
    public static int IP_PORTRANGE_HIGH() {
        return IP_PORTRANGE_HIGH;
    }

    private static final int IP_PORTRANGE_LOW = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IP_PORTRANGE_LOW 2
     * }
     */
    public static int IP_PORTRANGE_LOW() {
        return IP_PORTRANGE_LOW;
    }

    private static final int IPCTL_FORWARDING = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_FORWARDING 1
     * }
     */
    public static int IPCTL_FORWARDING() {
        return IPCTL_FORWARDING;
    }

    private static final int IPCTL_SENDREDIRECTS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_SENDREDIRECTS 2
     * }
     */
    public static int IPCTL_SENDREDIRECTS() {
        return IPCTL_SENDREDIRECTS;
    }

    private static final int IPCTL_DEFTTL = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_DEFTTL 3
     * }
     */
    public static int IPCTL_DEFTTL() {
        return IPCTL_DEFTTL;
    }

    private static final int IPCTL_RTEXPIRE = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_RTEXPIRE 5
     * }
     */
    public static int IPCTL_RTEXPIRE() {
        return IPCTL_RTEXPIRE;
    }

    private static final int IPCTL_RTMINEXPIRE = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_RTMINEXPIRE 6
     * }
     */
    public static int IPCTL_RTMINEXPIRE() {
        return IPCTL_RTMINEXPIRE;
    }

    private static final int IPCTL_RTMAXCACHE = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_RTMAXCACHE 7
     * }
     */
    public static int IPCTL_RTMAXCACHE() {
        return IPCTL_RTMAXCACHE;
    }

    private static final int IPCTL_SOURCEROUTE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_SOURCEROUTE 8
     * }
     */
    public static int IPCTL_SOURCEROUTE() {
        return IPCTL_SOURCEROUTE;
    }

    private static final int IPCTL_DIRECTEDBROADCAST = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_DIRECTEDBROADCAST 9
     * }
     */
    public static int IPCTL_DIRECTEDBROADCAST() {
        return IPCTL_DIRECTEDBROADCAST;
    }

    private static final int IPCTL_INTRQMAXLEN = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_INTRQMAXLEN 10
     * }
     */
    public static int IPCTL_INTRQMAXLEN() {
        return IPCTL_INTRQMAXLEN;
    }

    private static final int IPCTL_INTRQDROPS = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_INTRQDROPS 11
     * }
     */
    public static int IPCTL_INTRQDROPS() {
        return IPCTL_INTRQDROPS;
    }

    private static final int IPCTL_STATS = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_STATS 12
     * }
     */
    public static int IPCTL_STATS() {
        return IPCTL_STATS;
    }

    private static final int IPCTL_ACCEPTSOURCEROUTE = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_ACCEPTSOURCEROUTE 13
     * }
     */
    public static int IPCTL_ACCEPTSOURCEROUTE() {
        return IPCTL_ACCEPTSOURCEROUTE;
    }

    private static final int IPCTL_FASTFORWARDING = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_FASTFORWARDING 14
     * }
     */
    public static int IPCTL_FASTFORWARDING() {
        return IPCTL_FASTFORWARDING;
    }

    private static final int IPCTL_KEEPFAITH = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_KEEPFAITH 15
     * }
     */
    public static int IPCTL_KEEPFAITH() {
        return IPCTL_KEEPFAITH;
    }

    private static final int IPCTL_GIF_TTL = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_GIF_TTL 16
     * }
     */
    public static int IPCTL_GIF_TTL() {
        return IPCTL_GIF_TTL;
    }

    private static final int IPCTL_MAXID = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define IPCTL_MAXID 17
     * }
     */
    public static int IPCTL_MAXID() {
        return IPCTL_MAXID;
    }

    private static final int IPV6PORT_RESERVED = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define IPV6PORT_RESERVED 1024
     * }
     */
    public static int IPV6PORT_RESERVED() {
        return IPV6PORT_RESERVED;
    }

    private static final int IPV6PORT_ANONMIN = (int) 49152L;
    /**
     * {@snippet lang=c :
     * #define IPV6PORT_ANONMIN 49152
     * }
     */
    public static int IPV6PORT_ANONMIN() {
        return IPV6PORT_ANONMIN;
    }

    private static final int IPV6PORT_ANONMAX = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define IPV6PORT_ANONMAX 65535
     * }
     */
    public static int IPV6PORT_ANONMAX() {
        return IPV6PORT_ANONMAX;
    }

    private static final int IPV6PORT_RESERVEDMIN = (int) 600L;
    /**
     * {@snippet lang=c :
     * #define IPV6PORT_RESERVEDMIN 600
     * }
     */
    public static int IPV6PORT_RESERVEDMIN() {
        return IPV6PORT_RESERVEDMIN;
    }

    private static final int INET6_ADDRSTRLEN = (int) 46L;
    /**
     * {@snippet lang=c :
     * #define INET6_ADDRSTRLEN 46
     * }
     */
    public static int INET6_ADDRSTRLEN() {
        return INET6_ADDRSTRLEN;
    }

    private static final int __IPV6_ADDR_SCOPE_NODELOCAL = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_NODELOCAL 1
     * }
     */
    public static int __IPV6_ADDR_SCOPE_NODELOCAL() {
        return __IPV6_ADDR_SCOPE_NODELOCAL;
    }

    private static final int __IPV6_ADDR_SCOPE_INTFACELOCAL = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_INTFACELOCAL 1
     * }
     */
    public static int __IPV6_ADDR_SCOPE_INTFACELOCAL() {
        return __IPV6_ADDR_SCOPE_INTFACELOCAL;
    }

    private static final int __IPV6_ADDR_SCOPE_LINKLOCAL = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_LINKLOCAL 2
     * }
     */
    public static int __IPV6_ADDR_SCOPE_LINKLOCAL() {
        return __IPV6_ADDR_SCOPE_LINKLOCAL;
    }

    private static final int __IPV6_ADDR_SCOPE_SITELOCAL = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_SITELOCAL 5
     * }
     */
    public static int __IPV6_ADDR_SCOPE_SITELOCAL() {
        return __IPV6_ADDR_SCOPE_SITELOCAL;
    }

    private static final int __IPV6_ADDR_SCOPE_ORGLOCAL = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_ORGLOCAL 8
     * }
     */
    public static int __IPV6_ADDR_SCOPE_ORGLOCAL() {
        return __IPV6_ADDR_SCOPE_ORGLOCAL;
    }

    private static final int __IPV6_ADDR_SCOPE_GLOBAL = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define __IPV6_ADDR_SCOPE_GLOBAL 14
     * }
     */
    public static int __IPV6_ADDR_SCOPE_GLOBAL() {
        return __IPV6_ADDR_SCOPE_GLOBAL;
    }

    private static final int IPV6_ADDR_MC_FLAGS_TRANSIENT = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IPV6_ADDR_MC_FLAGS_TRANSIENT 16
     * }
     */
    public static int IPV6_ADDR_MC_FLAGS_TRANSIENT() {
        return IPV6_ADDR_MC_FLAGS_TRANSIENT;
    }

    private static final int IPV6_ADDR_MC_FLAGS_PREFIX = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IPV6_ADDR_MC_FLAGS_PREFIX 32
     * }
     */
    public static int IPV6_ADDR_MC_FLAGS_PREFIX() {
        return IPV6_ADDR_MC_FLAGS_PREFIX;
    }

    private static final int IPV6_SOCKOPT_RESERVED1 = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IPV6_SOCKOPT_RESERVED1 3
     * }
     */
    public static int IPV6_SOCKOPT_RESERVED1() {
        return IPV6_SOCKOPT_RESERVED1;
    }

    private static final int IPV6_UNICAST_HOPS = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define IPV6_UNICAST_HOPS 4
     * }
     */
    public static int IPV6_UNICAST_HOPS() {
        return IPV6_UNICAST_HOPS;
    }

    private static final int IPV6_MULTICAST_IF = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_IF 9
     * }
     */
    public static int IPV6_MULTICAST_IF() {
        return IPV6_MULTICAST_IF;
    }

    private static final int IPV6_MULTICAST_HOPS = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_HOPS 10
     * }
     */
    public static int IPV6_MULTICAST_HOPS() {
        return IPV6_MULTICAST_HOPS;
    }

    private static final int IPV6_MULTICAST_LOOP = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_LOOP 11
     * }
     */
    public static int IPV6_MULTICAST_LOOP() {
        return IPV6_MULTICAST_LOOP;
    }

    private static final int IPV6_JOIN_GROUP = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define IPV6_JOIN_GROUP 12
     * }
     */
    public static int IPV6_JOIN_GROUP() {
        return IPV6_JOIN_GROUP;
    }

    private static final int IPV6_LEAVE_GROUP = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define IPV6_LEAVE_GROUP 13
     * }
     */
    public static int IPV6_LEAVE_GROUP() {
        return IPV6_LEAVE_GROUP;
    }

    private static final int IPV6_PORTRANGE = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define IPV6_PORTRANGE 14
     * }
     */
    public static int IPV6_PORTRANGE() {
        return IPV6_PORTRANGE;
    }

    private static final int ICMP6_FILTER = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define ICMP6_FILTER 18
     * }
     */
    public static int ICMP6_FILTER() {
        return ICMP6_FILTER;
    }

    private static final int IPV6_2292PKTINFO = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292PKTINFO 19
     * }
     */
    public static int IPV6_2292PKTINFO() {
        return IPV6_2292PKTINFO;
    }

    private static final int IPV6_2292HOPLIMIT = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292HOPLIMIT 20
     * }
     */
    public static int IPV6_2292HOPLIMIT() {
        return IPV6_2292HOPLIMIT;
    }

    private static final int IPV6_2292NEXTHOP = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292NEXTHOP 21
     * }
     */
    public static int IPV6_2292NEXTHOP() {
        return IPV6_2292NEXTHOP;
    }

    private static final int IPV6_2292HOPOPTS = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292HOPOPTS 22
     * }
     */
    public static int IPV6_2292HOPOPTS() {
        return IPV6_2292HOPOPTS;
    }

    private static final int IPV6_2292DSTOPTS = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292DSTOPTS 23
     * }
     */
    public static int IPV6_2292DSTOPTS() {
        return IPV6_2292DSTOPTS;
    }

    private static final int IPV6_2292RTHDR = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292RTHDR 24
     * }
     */
    public static int IPV6_2292RTHDR() {
        return IPV6_2292RTHDR;
    }

    private static final int IPV6_2292PKTOPTIONS = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define IPV6_2292PKTOPTIONS 25
     * }
     */
    public static int IPV6_2292PKTOPTIONS() {
        return IPV6_2292PKTOPTIONS;
    }

    private static final int IPV6_CHECKSUM = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define IPV6_CHECKSUM 26
     * }
     */
    public static int IPV6_CHECKSUM() {
        return IPV6_CHECKSUM;
    }

    private static final int IPV6_V6ONLY = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define IPV6_V6ONLY 27
     * }
     */
    public static int IPV6_V6ONLY() {
        return IPV6_V6ONLY;
    }

    private static final int IPV6_IPSEC_POLICY = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define IPV6_IPSEC_POLICY 28
     * }
     */
    public static int IPV6_IPSEC_POLICY() {
        return IPV6_IPSEC_POLICY;
    }

    private static final int IPV6_FAITH = (int) 29L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FAITH 29
     * }
     */
    public static int IPV6_FAITH() {
        return IPV6_FAITH;
    }

    private static final int IPV6_FW_ADD = (int) 30L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FW_ADD 30
     * }
     */
    public static int IPV6_FW_ADD() {
        return IPV6_FW_ADD;
    }

    private static final int IPV6_FW_DEL = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FW_DEL 31
     * }
     */
    public static int IPV6_FW_DEL() {
        return IPV6_FW_DEL;
    }

    private static final int IPV6_FW_FLUSH = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FW_FLUSH 32
     * }
     */
    public static int IPV6_FW_FLUSH() {
        return IPV6_FW_FLUSH;
    }

    private static final int IPV6_FW_ZERO = (int) 33L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FW_ZERO 33
     * }
     */
    public static int IPV6_FW_ZERO() {
        return IPV6_FW_ZERO;
    }

    private static final int IPV6_FW_GET = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define IPV6_FW_GET 34
     * }
     */
    public static int IPV6_FW_GET() {
        return IPV6_FW_GET;
    }

    private static final int IPV6_RECVTCLASS = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define IPV6_RECVTCLASS 35
     * }
     */
    public static int IPV6_RECVTCLASS() {
        return IPV6_RECVTCLASS;
    }

    private static final int IPV6_TCLASS = (int) 36L;
    /**
     * {@snippet lang=c :
     * #define IPV6_TCLASS 36
     * }
     */
    public static int IPV6_TCLASS() {
        return IPV6_TCLASS;
    }

    private static final int IPV6_BOUND_IF = (int) 125L;
    /**
     * {@snippet lang=c :
     * #define IPV6_BOUND_IF 125
     * }
     */
    public static int IPV6_BOUND_IF() {
        return IPV6_BOUND_IF;
    }

    private static final int IPV6_RTHDR_LOOSE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_LOOSE 0
     * }
     */
    public static int IPV6_RTHDR_LOOSE() {
        return IPV6_RTHDR_LOOSE;
    }

    private static final int IPV6_RTHDR_STRICT = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_STRICT 1
     * }
     */
    public static int IPV6_RTHDR_STRICT() {
        return IPV6_RTHDR_STRICT;
    }

    private static final int IPV6_RTHDR_TYPE_0 = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_TYPE_0 0
     * }
     */
    public static int IPV6_RTHDR_TYPE_0() {
        return IPV6_RTHDR_TYPE_0;
    }

    private static final int IPV6_DEFAULT_MULTICAST_HOPS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPV6_DEFAULT_MULTICAST_HOPS 1
     * }
     */
    public static int IPV6_DEFAULT_MULTICAST_HOPS() {
        return IPV6_DEFAULT_MULTICAST_HOPS;
    }

    private static final int IPV6_DEFAULT_MULTICAST_LOOP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPV6_DEFAULT_MULTICAST_LOOP 1
     * }
     */
    public static int IPV6_DEFAULT_MULTICAST_LOOP() {
        return IPV6_DEFAULT_MULTICAST_LOOP;
    }

    private static final int IPV6_MIN_MEMBERSHIPS = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MIN_MEMBERSHIPS 31
     * }
     */
    public static int IPV6_MIN_MEMBERSHIPS() {
        return IPV6_MIN_MEMBERSHIPS;
    }

    private static final int IPV6_MAX_MEMBERSHIPS = (int) 4095L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MAX_MEMBERSHIPS 4095
     * }
     */
    public static int IPV6_MAX_MEMBERSHIPS() {
        return IPV6_MAX_MEMBERSHIPS;
    }

    private static final int IPV6_MAX_GROUP_SRC_FILTER = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MAX_GROUP_SRC_FILTER 512
     * }
     */
    public static int IPV6_MAX_GROUP_SRC_FILTER() {
        return IPV6_MAX_GROUP_SRC_FILTER;
    }

    private static final int IPV6_MAX_SOCK_SRC_FILTER = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define IPV6_MAX_SOCK_SRC_FILTER 128
     * }
     */
    public static int IPV6_MAX_SOCK_SRC_FILTER() {
        return IPV6_MAX_SOCK_SRC_FILTER;
    }

    private static final int IPV6_PORTRANGE_DEFAULT = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define IPV6_PORTRANGE_DEFAULT 0
     * }
     */
    public static int IPV6_PORTRANGE_DEFAULT() {
        return IPV6_PORTRANGE_DEFAULT;
    }

    private static final int IPV6_PORTRANGE_HIGH = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPV6_PORTRANGE_HIGH 1
     * }
     */
    public static int IPV6_PORTRANGE_HIGH() {
        return IPV6_PORTRANGE_HIGH;
    }

    private static final int IPV6_PORTRANGE_LOW = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IPV6_PORTRANGE_LOW 2
     * }
     */
    public static int IPV6_PORTRANGE_LOW() {
        return IPV6_PORTRANGE_LOW;
    }

    private static final int IPV6CTL_FORWARDING = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_FORWARDING 1
     * }
     */
    public static int IPV6CTL_FORWARDING() {
        return IPV6CTL_FORWARDING;
    }

    private static final int IPV6CTL_SENDREDIRECTS = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_SENDREDIRECTS 2
     * }
     */
    public static int IPV6CTL_SENDREDIRECTS() {
        return IPV6CTL_SENDREDIRECTS;
    }

    private static final int IPV6CTL_DEFHLIM = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_DEFHLIM 3
     * }
     */
    public static int IPV6CTL_DEFHLIM() {
        return IPV6CTL_DEFHLIM;
    }

    private static final int IPV6CTL_FORWSRCRT = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_FORWSRCRT 5
     * }
     */
    public static int IPV6CTL_FORWSRCRT() {
        return IPV6CTL_FORWSRCRT;
    }

    private static final int IPV6CTL_STATS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_STATS 6
     * }
     */
    public static int IPV6CTL_STATS() {
        return IPV6CTL_STATS;
    }

    private static final int IPV6CTL_MRTSTATS = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MRTSTATS 7
     * }
     */
    public static int IPV6CTL_MRTSTATS() {
        return IPV6CTL_MRTSTATS;
    }

    private static final int IPV6CTL_MRTPROTO = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MRTPROTO 8
     * }
     */
    public static int IPV6CTL_MRTPROTO() {
        return IPV6CTL_MRTPROTO;
    }

    private static final int IPV6CTL_MAXFRAGPACKETS = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXFRAGPACKETS 9
     * }
     */
    public static int IPV6CTL_MAXFRAGPACKETS() {
        return IPV6CTL_MAXFRAGPACKETS;
    }

    private static final int IPV6CTL_SOURCECHECK = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_SOURCECHECK 10
     * }
     */
    public static int IPV6CTL_SOURCECHECK() {
        return IPV6CTL_SOURCECHECK;
    }

    private static final int IPV6CTL_SOURCECHECK_LOGINT = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_SOURCECHECK_LOGINT 11
     * }
     */
    public static int IPV6CTL_SOURCECHECK_LOGINT() {
        return IPV6CTL_SOURCECHECK_LOGINT;
    }

    private static final int IPV6CTL_ACCEPT_RTADV = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_ACCEPT_RTADV 12
     * }
     */
    public static int IPV6CTL_ACCEPT_RTADV() {
        return IPV6CTL_ACCEPT_RTADV;
    }

    private static final int IPV6CTL_KEEPFAITH = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_KEEPFAITH 13
     * }
     */
    public static int IPV6CTL_KEEPFAITH() {
        return IPV6CTL_KEEPFAITH;
    }

    private static final int IPV6CTL_LOG_INTERVAL = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_LOG_INTERVAL 14
     * }
     */
    public static int IPV6CTL_LOG_INTERVAL() {
        return IPV6CTL_LOG_INTERVAL;
    }

    private static final int IPV6CTL_HDRNESTLIMIT = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_HDRNESTLIMIT 15
     * }
     */
    public static int IPV6CTL_HDRNESTLIMIT() {
        return IPV6CTL_HDRNESTLIMIT;
    }

    private static final int IPV6CTL_DAD_COUNT = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_DAD_COUNT 16
     * }
     */
    public static int IPV6CTL_DAD_COUNT() {
        return IPV6CTL_DAD_COUNT;
    }

    private static final int IPV6CTL_AUTO_FLOWLABEL = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_AUTO_FLOWLABEL 17
     * }
     */
    public static int IPV6CTL_AUTO_FLOWLABEL() {
        return IPV6CTL_AUTO_FLOWLABEL;
    }

    private static final int IPV6CTL_DEFMCASTHLIM = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_DEFMCASTHLIM 18
     * }
     */
    public static int IPV6CTL_DEFMCASTHLIM() {
        return IPV6CTL_DEFMCASTHLIM;
    }

    private static final int IPV6CTL_GIF_HLIM = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_GIF_HLIM 19
     * }
     */
    public static int IPV6CTL_GIF_HLIM() {
        return IPV6CTL_GIF_HLIM;
    }

    private static final int IPV6CTL_KAME_VERSION = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_KAME_VERSION 20
     * }
     */
    public static int IPV6CTL_KAME_VERSION() {
        return IPV6CTL_KAME_VERSION;
    }

    private static final int IPV6CTL_USE_DEPRECATED = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_USE_DEPRECATED 21
     * }
     */
    public static int IPV6CTL_USE_DEPRECATED() {
        return IPV6CTL_USE_DEPRECATED;
    }

    private static final int IPV6CTL_RR_PRUNE = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_RR_PRUNE 22
     * }
     */
    public static int IPV6CTL_RR_PRUNE() {
        return IPV6CTL_RR_PRUNE;
    }

    private static final int IPV6CTL_V6ONLY = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_V6ONLY 24
     * }
     */
    public static int IPV6CTL_V6ONLY() {
        return IPV6CTL_V6ONLY;
    }

    private static final int IPV6CTL_RTEXPIRE = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_RTEXPIRE 25
     * }
     */
    public static int IPV6CTL_RTEXPIRE() {
        return IPV6CTL_RTEXPIRE;
    }

    private static final int IPV6CTL_RTMINEXPIRE = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_RTMINEXPIRE 26
     * }
     */
    public static int IPV6CTL_RTMINEXPIRE() {
        return IPV6CTL_RTMINEXPIRE;
    }

    private static final int IPV6CTL_RTMAXCACHE = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_RTMAXCACHE 27
     * }
     */
    public static int IPV6CTL_RTMAXCACHE() {
        return IPV6CTL_RTMAXCACHE;
    }

    private static final int IPV6CTL_USETEMPADDR = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_USETEMPADDR 32
     * }
     */
    public static int IPV6CTL_USETEMPADDR() {
        return IPV6CTL_USETEMPADDR;
    }

    private static final int IPV6CTL_TEMPPLTIME = (int) 33L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_TEMPPLTIME 33
     * }
     */
    public static int IPV6CTL_TEMPPLTIME() {
        return IPV6CTL_TEMPPLTIME;
    }

    private static final int IPV6CTL_TEMPVLTIME = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_TEMPVLTIME 34
     * }
     */
    public static int IPV6CTL_TEMPVLTIME() {
        return IPV6CTL_TEMPVLTIME;
    }

    private static final int IPV6CTL_AUTO_LINKLOCAL = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_AUTO_LINKLOCAL 35
     * }
     */
    public static int IPV6CTL_AUTO_LINKLOCAL() {
        return IPV6CTL_AUTO_LINKLOCAL;
    }

    private static final int IPV6CTL_RIP6STATS = (int) 36L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_RIP6STATS 36
     * }
     */
    public static int IPV6CTL_RIP6STATS() {
        return IPV6CTL_RIP6STATS;
    }

    private static final int IPV6CTL_PREFER_TEMPADDR = (int) 37L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_PREFER_TEMPADDR 37
     * }
     */
    public static int IPV6CTL_PREFER_TEMPADDR() {
        return IPV6CTL_PREFER_TEMPADDR;
    }

    private static final int IPV6CTL_ADDRCTLPOLICY = (int) 38L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_ADDRCTLPOLICY 38
     * }
     */
    public static int IPV6CTL_ADDRCTLPOLICY() {
        return IPV6CTL_ADDRCTLPOLICY;
    }

    private static final int IPV6CTL_USE_DEFAULTZONE = (int) 39L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_USE_DEFAULTZONE 39
     * }
     */
    public static int IPV6CTL_USE_DEFAULTZONE() {
        return IPV6CTL_USE_DEFAULTZONE;
    }

    private static final int IPV6CTL_MAXFRAGS = (int) 41L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXFRAGS 41
     * }
     */
    public static int IPV6CTL_MAXFRAGS() {
        return IPV6CTL_MAXFRAGS;
    }

    private static final int IPV6CTL_MCAST_PMTU = (int) 44L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MCAST_PMTU 44
     * }
     */
    public static int IPV6CTL_MCAST_PMTU() {
        return IPV6CTL_MCAST_PMTU;
    }

    private static final int IPV6CTL_NEIGHBORGCTHRESH = (int) 46L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_NEIGHBORGCTHRESH 46
     * }
     */
    public static int IPV6CTL_NEIGHBORGCTHRESH() {
        return IPV6CTL_NEIGHBORGCTHRESH;
    }

    private static final int IPV6CTL_MAXIFPREFIXES = (int) 47L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXIFPREFIXES 47
     * }
     */
    public static int IPV6CTL_MAXIFPREFIXES() {
        return IPV6CTL_MAXIFPREFIXES;
    }

    private static final int IPV6CTL_MAXIFDEFROUTERS = (int) 48L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXIFDEFROUTERS 48
     * }
     */
    public static int IPV6CTL_MAXIFDEFROUTERS() {
        return IPV6CTL_MAXIFDEFROUTERS;
    }

    private static final int IPV6CTL_MAXDYNROUTES = (int) 49L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXDYNROUTES 49
     * }
     */
    public static int IPV6CTL_MAXDYNROUTES() {
        return IPV6CTL_MAXDYNROUTES;
    }

    private static final int ICMPV6CTL_ND6_ONLINKNSRFC4861 = (int) 50L;
    /**
     * {@snippet lang=c :
     * #define ICMPV6CTL_ND6_ONLINKNSRFC4861 50
     * }
     */
    public static int ICMPV6CTL_ND6_ONLINKNSRFC4861() {
        return ICMPV6CTL_ND6_ONLINKNSRFC4861;
    }

    private static final int IPV6CTL_ULA_USETEMPADDR = (int) 51L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_ULA_USETEMPADDR 51
     * }
     */
    public static int IPV6CTL_ULA_USETEMPADDR() {
        return IPV6CTL_ULA_USETEMPADDR;
    }

    private static final int IPV6CTL_MAXID = (int) 51L;
    /**
     * {@snippet lang=c :
     * #define IPV6CTL_MAXID 51
     * }
     */
    public static int IPV6CTL_MAXID() {
        return IPV6CTL_MAXID;
    }

    private static final int TH_FIN = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TH_FIN 1
     * }
     */
    public static int TH_FIN() {
        return TH_FIN;
    }

    private static final int TH_SYN = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TH_SYN 2
     * }
     */
    public static int TH_SYN() {
        return TH_SYN;
    }

    private static final int TH_RST = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TH_RST 4
     * }
     */
    public static int TH_RST() {
        return TH_RST;
    }

    private static final int TH_PUSH = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TH_PUSH 8
     * }
     */
    public static int TH_PUSH() {
        return TH_PUSH;
    }

    private static final int TH_ACK = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define TH_ACK 16
     * }
     */
    public static int TH_ACK() {
        return TH_ACK;
    }

    private static final int TH_URG = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define TH_URG 32
     * }
     */
    public static int TH_URG() {
        return TH_URG;
    }

    private static final int TH_ECE = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define TH_ECE 64
     * }
     */
    public static int TH_ECE() {
        return TH_ECE;
    }

    private static final int TH_CWR = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define TH_CWR 128
     * }
     */
    public static int TH_CWR() {
        return TH_CWR;
    }

    private static final int TH_AE = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define TH_AE 256
     * }
     */
    public static int TH_AE() {
        return TH_AE;
    }

    private static final int TCPOPT_EOL = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_EOL 0
     * }
     */
    public static int TCPOPT_EOL() {
        return TCPOPT_EOL;
    }

    private static final int TCPOPT_NOP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_NOP 1
     * }
     */
    public static int TCPOPT_NOP() {
        return TCPOPT_NOP;
    }

    private static final int TCPOPT_MAXSEG = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_MAXSEG 2
     * }
     */
    public static int TCPOPT_MAXSEG() {
        return TCPOPT_MAXSEG;
    }

    private static final int TCPOLEN_MAXSEG = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_MAXSEG 4
     * }
     */
    public static int TCPOLEN_MAXSEG() {
        return TCPOLEN_MAXSEG;
    }

    private static final int TCPOPT_WINDOW = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_WINDOW 3
     * }
     */
    public static int TCPOPT_WINDOW() {
        return TCPOPT_WINDOW;
    }

    private static final int TCPOLEN_WINDOW = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_WINDOW 3
     * }
     */
    public static int TCPOLEN_WINDOW() {
        return TCPOLEN_WINDOW;
    }

    private static final int TCPOPT_SACK_PERMITTED = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_SACK_PERMITTED 4
     * }
     */
    public static int TCPOPT_SACK_PERMITTED() {
        return TCPOPT_SACK_PERMITTED;
    }

    private static final int TCPOLEN_SACK_PERMITTED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_SACK_PERMITTED 2
     * }
     */
    public static int TCPOLEN_SACK_PERMITTED() {
        return TCPOLEN_SACK_PERMITTED;
    }

    private static final int TCPOPT_SACK = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_SACK 5
     * }
     */
    public static int TCPOPT_SACK() {
        return TCPOPT_SACK;
    }

    private static final int TCPOLEN_SACK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_SACK 8
     * }
     */
    public static int TCPOLEN_SACK() {
        return TCPOLEN_SACK;
    }

    private static final int TCPOPT_TIMESTAMP = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_TIMESTAMP 8
     * }
     */
    public static int TCPOPT_TIMESTAMP() {
        return TCPOPT_TIMESTAMP;
    }

    private static final int TCPOLEN_TIMESTAMP = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_TIMESTAMP 10
     * }
     */
    public static int TCPOLEN_TIMESTAMP() {
        return TCPOLEN_TIMESTAMP;
    }

    private static final int MAX_TCPOPTLEN = (int) 40L;
    /**
     * {@snippet lang=c :
     * #define MAX_TCPOPTLEN 40
     * }
     */
    public static int MAX_TCPOPTLEN() {
        return MAX_TCPOPTLEN;
    }

    private static final int TCPOPT_CC = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_CC 11
     * }
     */
    public static int TCPOPT_CC() {
        return TCPOPT_CC;
    }

    private static final int TCPOPT_CCNEW = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_CCNEW 12
     * }
     */
    public static int TCPOPT_CCNEW() {
        return TCPOPT_CCNEW;
    }

    private static final int TCPOPT_CCECHO = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_CCECHO 13
     * }
     */
    public static int TCPOPT_CCECHO() {
        return TCPOPT_CCECHO;
    }

    private static final int TCPOLEN_CC = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_CC 6
     * }
     */
    public static int TCPOLEN_CC() {
        return TCPOLEN_CC;
    }

    private static final int TCPOPT_SIGNATURE = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_SIGNATURE 19
     * }
     */
    public static int TCPOPT_SIGNATURE() {
        return TCPOPT_SIGNATURE;
    }

    private static final int TCPOLEN_SIGNATURE = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_SIGNATURE 18
     * }
     */
    public static int TCPOLEN_SIGNATURE() {
        return TCPOLEN_SIGNATURE;
    }

    private static final int TCPOPT_FASTOPEN = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_FASTOPEN 34
     * }
     */
    public static int TCPOPT_FASTOPEN() {
        return TCPOPT_FASTOPEN;
    }

    private static final int TCPOLEN_FASTOPEN_REQ = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_FASTOPEN_REQ 2
     * }
     */
    public static int TCPOLEN_FASTOPEN_REQ() {
        return TCPOLEN_FASTOPEN_REQ;
    }

    private static final int TCPOPT_ACCECN0 = (int) 172L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_ACCECN0 172
     * }
     */
    public static int TCPOPT_ACCECN0() {
        return TCPOPT_ACCECN0;
    }

    private static final int TCPOPT_ACCECN1 = (int) 174L;
    /**
     * {@snippet lang=c :
     * #define TCPOPT_ACCECN1 174
     * }
     */
    public static int TCPOPT_ACCECN1() {
        return TCPOPT_ACCECN1;
    }

    private static final int TCPOLEN_ACCECN_EMPTY = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_ACCECN_EMPTY 2
     * }
     */
    public static int TCPOLEN_ACCECN_EMPTY() {
        return TCPOLEN_ACCECN_EMPTY;
    }

    private static final int TCPOLEN_ACCECN_COUNTER = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TCPOLEN_ACCECN_COUNTER 3
     * }
     */
    public static int TCPOLEN_ACCECN_COUNTER() {
        return TCPOLEN_ACCECN_COUNTER;
    }

    private static final int MAX_SACK_BLKS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define MAX_SACK_BLKS 6
     * }
     */
    public static int MAX_SACK_BLKS() {
        return MAX_SACK_BLKS;
    }

    private static final int TCP_MAX_SACK = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TCP_MAX_SACK 4
     * }
     */
    public static int TCP_MAX_SACK() {
        return TCP_MAX_SACK;
    }

    private static final int TCP_MSS = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define TCP_MSS 512
     * }
     */
    public static int TCP_MSS() {
        return TCP_MSS;
    }

    private static final int TCP_MINMSS = (int) 216L;
    /**
     * {@snippet lang=c :
     * #define TCP_MINMSS 216
     * }
     */
    public static int TCP_MINMSS() {
        return TCP_MINMSS;
    }

    private static final int TCP6_MSS = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define TCP6_MSS 1024
     * }
     */
    public static int TCP6_MSS() {
        return TCP6_MSS;
    }

    private static final int TCP_MAXWIN = (int) 65535L;
    /**
     * {@snippet lang=c :
     * #define TCP_MAXWIN 65535
     * }
     */
    public static int TCP_MAXWIN() {
        return TCP_MAXWIN;
    }

    private static final int TTCP_CLIENT_SND_WND = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define TTCP_CLIENT_SND_WND 4096
     * }
     */
    public static int TTCP_CLIENT_SND_WND() {
        return TTCP_CLIENT_SND_WND;
    }

    private static final int TCP_MAX_WINSHIFT = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define TCP_MAX_WINSHIFT 14
     * }
     */
    public static int TCP_MAX_WINSHIFT() {
        return TCP_MAX_WINSHIFT;
    }

    private static final int TCP_NODELAY = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TCP_NODELAY 1
     * }
     */
    public static int TCP_NODELAY() {
        return TCP_NODELAY;
    }

    private static final int TCP_MAXSEG = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCP_MAXSEG 2
     * }
     */
    public static int TCP_MAXSEG() {
        return TCP_MAXSEG;
    }

    private static final int TCP_NOPUSH = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TCP_NOPUSH 4
     * }
     */
    public static int TCP_NOPUSH() {
        return TCP_NOPUSH;
    }

    private static final int TCP_NOOPT = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TCP_NOOPT 8
     * }
     */
    public static int TCP_NOOPT() {
        return TCP_NOOPT;
    }

    private static final int TCP_KEEPALIVE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define TCP_KEEPALIVE 16
     * }
     */
    public static int TCP_KEEPALIVE() {
        return TCP_KEEPALIVE;
    }

    private static final int TCP_CONNECTIONTIMEOUT = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define TCP_CONNECTIONTIMEOUT 32
     * }
     */
    public static int TCP_CONNECTIONTIMEOUT() {
        return TCP_CONNECTIONTIMEOUT;
    }

    private static final int PERSIST_TIMEOUT = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define PERSIST_TIMEOUT 64
     * }
     */
    public static int PERSIST_TIMEOUT() {
        return PERSIST_TIMEOUT;
    }

    private static final int TCP_RXT_CONNDROPTIME = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define TCP_RXT_CONNDROPTIME 128
     * }
     */
    public static int TCP_RXT_CONNDROPTIME() {
        return TCP_RXT_CONNDROPTIME;
    }

    private static final int TCP_RXT_FINDROP = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define TCP_RXT_FINDROP 256
     * }
     */
    public static int TCP_RXT_FINDROP() {
        return TCP_RXT_FINDROP;
    }

    private static final int TCP_KEEPINTVL = (int) 257L;
    /**
     * {@snippet lang=c :
     * #define TCP_KEEPINTVL 257
     * }
     */
    public static int TCP_KEEPINTVL() {
        return TCP_KEEPINTVL;
    }

    private static final int TCP_KEEPCNT = (int) 258L;
    /**
     * {@snippet lang=c :
     * #define TCP_KEEPCNT 258
     * }
     */
    public static int TCP_KEEPCNT() {
        return TCP_KEEPCNT;
    }

    private static final int TCP_SENDMOREACKS = (int) 259L;
    /**
     * {@snippet lang=c :
     * #define TCP_SENDMOREACKS 259
     * }
     */
    public static int TCP_SENDMOREACKS() {
        return TCP_SENDMOREACKS;
    }

    private static final int TCP_ENABLE_ECN = (int) 260L;
    /**
     * {@snippet lang=c :
     * #define TCP_ENABLE_ECN 260
     * }
     */
    public static int TCP_ENABLE_ECN() {
        return TCP_ENABLE_ECN;
    }

    private static final int TCP_FASTOPEN = (int) 261L;
    /**
     * {@snippet lang=c :
     * #define TCP_FASTOPEN 261
     * }
     */
    public static int TCP_FASTOPEN() {
        return TCP_FASTOPEN;
    }

    private static final int TCP_CONNECTION_INFO = (int) 262L;
    /**
     * {@snippet lang=c :
     * #define TCP_CONNECTION_INFO 262
     * }
     */
    public static int TCP_CONNECTION_INFO() {
        return TCP_CONNECTION_INFO;
    }

    private static final int TCP_NOTSENT_LOWAT = (int) 513L;
    /**
     * {@snippet lang=c :
     * #define TCP_NOTSENT_LOWAT 513
     * }
     */
    public static int TCP_NOTSENT_LOWAT() {
        return TCP_NOTSENT_LOWAT;
    }

    private static final int TCPCI_OPT_TIMESTAMPS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_OPT_TIMESTAMPS 1
     * }
     */
    public static int TCPCI_OPT_TIMESTAMPS() {
        return TCPCI_OPT_TIMESTAMPS;
    }

    private static final int TCPCI_OPT_SACK = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_OPT_SACK 2
     * }
     */
    public static int TCPCI_OPT_SACK() {
        return TCPCI_OPT_SACK;
    }

    private static final int TCPCI_OPT_WSCALE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_OPT_WSCALE 4
     * }
     */
    public static int TCPCI_OPT_WSCALE() {
        return TCPCI_OPT_WSCALE;
    }

    private static final int TCPCI_OPT_ECN = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_OPT_ECN 8
     * }
     */
    public static int TCPCI_OPT_ECN() {
        return TCPCI_OPT_ECN;
    }

    private static final int TCPCI_FLAG_LOSSRECOVERY = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_FLAG_LOSSRECOVERY 1
     * }
     */
    public static int TCPCI_FLAG_LOSSRECOVERY() {
        return TCPCI_FLAG_LOSSRECOVERY;
    }

    private static final int TCPCI_FLAG_REORDERING_DETECTED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TCPCI_FLAG_REORDERING_DETECTED 2
     * }
     */
    public static int TCPCI_FLAG_REORDERING_DETECTED() {
        return TCPCI_FLAG_REORDERING_DETECTED;
    }

    private static final int CPU_STATE_MAX = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define CPU_STATE_MAX 4
     * }
     */
    public static int CPU_STATE_MAX() {
        return CPU_STATE_MAX;
    }

    private static final int CPU_STATE_USER = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define CPU_STATE_USER 0
     * }
     */
    public static int CPU_STATE_USER() {
        return CPU_STATE_USER;
    }

    private static final int CPU_STATE_SYSTEM = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define CPU_STATE_SYSTEM 1
     * }
     */
    public static int CPU_STATE_SYSTEM() {
        return CPU_STATE_SYSTEM;
    }

    private static final int CPU_STATE_IDLE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define CPU_STATE_IDLE 2
     * }
     */
    public static int CPU_STATE_IDLE() {
        return CPU_STATE_IDLE;
    }

    private static final int CPU_STATE_NICE = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define CPU_STATE_NICE 3
     * }
     */
    public static int CPU_STATE_NICE() {
        return CPU_STATE_NICE;
    }

    private static final int CPU_ARCH_ABI64 = (int) 16777216L;
    /**
     * {@snippet lang=c :
     * #define CPU_ARCH_ABI64 16777216
     * }
     */
    public static int CPU_ARCH_ABI64() {
        return CPU_ARCH_ABI64;
    }

    private static final int CPU_ARCH_ABI64_32 = (int) 33554432L;
    /**
     * {@snippet lang=c :
     * #define CPU_ARCH_ABI64_32 33554432
     * }
     */
    public static int CPU_ARCH_ABI64_32() {
        return CPU_ARCH_ABI64_32;
    }

    private static final int CPU_SUBTYPE_INTEL_FAMILY_MAX = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define CPU_SUBTYPE_INTEL_FAMILY_MAX 15
     * }
     */
    public static int CPU_SUBTYPE_INTEL_FAMILY_MAX() {
        return CPU_SUBTYPE_INTEL_FAMILY_MAX;
    }

    private static final int CPU_SUBTYPE_INTEL_MODEL_ALL = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define CPU_SUBTYPE_INTEL_MODEL_ALL 0
     * }
     */
    public static int CPU_SUBTYPE_INTEL_MODEL_ALL() {
        return CPU_SUBTYPE_INTEL_MODEL_ALL;
    }

    private static final int CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = (int) 251658240L;
    /**
     * {@snippet lang=c :
     * #define CPU_SUBTYPE_ARM64_PTR_AUTH_MASK 251658240
     * }
     */
    public static int CPU_SUBTYPE_ARM64_PTR_AUTH_MASK() {
        return CPU_SUBTYPE_ARM64_PTR_AUTH_MASK;
    }

    private static final int CPUFAMILY_UNKNOWN = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_UNKNOWN 0
     * }
     */
    public static int CPUFAMILY_UNKNOWN() {
        return CPUFAMILY_UNKNOWN;
    }

    private static final int CPUFAMILY_POWERPC_G4 = (int) 2009171118L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_POWERPC_G4 2009171118
     * }
     */
    public static int CPUFAMILY_POWERPC_G4() {
        return CPUFAMILY_POWERPC_G4;
    }

    private static final int CPUFAMILY_INTEL_PENRYN = (int) 2028621756L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_PENRYN 2028621756
     * }
     */
    public static int CPUFAMILY_INTEL_PENRYN() {
        return CPUFAMILY_INTEL_PENRYN;
    }

    private static final int CPUFAMILY_INTEL_NEHALEM = (int) 1801080018L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_NEHALEM 1801080018
     * }
     */
    public static int CPUFAMILY_INTEL_NEHALEM() {
        return CPUFAMILY_INTEL_NEHALEM;
    }

    private static final int CPUFAMILY_INTEL_WESTMERE = (int) 1463508716L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_WESTMERE 1463508716
     * }
     */
    public static int CPUFAMILY_INTEL_WESTMERE() {
        return CPUFAMILY_INTEL_WESTMERE;
    }

    private static final int CPUFAMILY_INTEL_SANDYBRIDGE = (int) 1418770316L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_SANDYBRIDGE 1418770316
     * }
     */
    public static int CPUFAMILY_INTEL_SANDYBRIDGE() {
        return CPUFAMILY_INTEL_SANDYBRIDGE;
    }

    private static final int CPUFAMILY_INTEL_IVYBRIDGE = (int) 526772277L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_IVYBRIDGE 526772277
     * }
     */
    public static int CPUFAMILY_INTEL_IVYBRIDGE() {
        return CPUFAMILY_INTEL_IVYBRIDGE;
    }

    private static final int CPUFAMILY_INTEL_HASWELL = (int) 280134364L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_HASWELL 280134364
     * }
     */
    public static int CPUFAMILY_INTEL_HASWELL() {
        return CPUFAMILY_INTEL_HASWELL;
    }

    private static final int CPUFAMILY_INTEL_BROADWELL = (int) 1479463068L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_BROADWELL 1479463068
     * }
     */
    public static int CPUFAMILY_INTEL_BROADWELL() {
        return CPUFAMILY_INTEL_BROADWELL;
    }

    private static final int CPUFAMILY_INTEL_SKYLAKE = (int) 939270559L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_SKYLAKE 939270559
     * }
     */
    public static int CPUFAMILY_INTEL_SKYLAKE() {
        return CPUFAMILY_INTEL_SKYLAKE;
    }

    private static final int CPUFAMILY_INTEL_KABYLAKE = (int) 260141638L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_KABYLAKE 260141638
     * }
     */
    public static int CPUFAMILY_INTEL_KABYLAKE() {
        return CPUFAMILY_INTEL_KABYLAKE;
    }

    private static final int CPUFAMILY_INTEL_ICELAKE = (int) 943936839L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_ICELAKE 943936839
     * }
     */
    public static int CPUFAMILY_INTEL_ICELAKE() {
        return CPUFAMILY_INTEL_ICELAKE;
    }

    private static final int CPUFAMILY_INTEL_COMETLAKE = (int) 486055998L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_INTEL_COMETLAKE 486055998
     * }
     */
    public static int CPUFAMILY_INTEL_COMETLAKE() {
        return CPUFAMILY_INTEL_COMETLAKE;
    }

    private static final int CPUFAMILY_ARM_XSCALE = (int) 1404044789L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_XSCALE 1404044789
     * }
     */
    public static int CPUFAMILY_ARM_XSCALE() {
        return CPUFAMILY_ARM_XSCALE;
    }

    private static final int CPUFAMILY_ARM_13 = (int) 214503012L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_13 214503012
     * }
     */
    public static int CPUFAMILY_ARM_13() {
        return CPUFAMILY_ARM_13;
    }

    private static final int CPUFAMILY_ARM_SWIFT = (int) 506291073L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_SWIFT 506291073
     * }
     */
    public static int CPUFAMILY_ARM_SWIFT() {
        return CPUFAMILY_ARM_SWIFT;
    }

    private static final int CPUFAMILY_ARM_CYCLONE = (int) 933271106L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_CYCLONE 933271106
     * }
     */
    public static int CPUFAMILY_ARM_CYCLONE() {
        return CPUFAMILY_ARM_CYCLONE;
    }

    private static final int CPUFAMILY_ARM_TYPHOON = (int) 747742334L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_TYPHOON 747742334
     * }
     */
    public static int CPUFAMILY_ARM_TYPHOON() {
        return CPUFAMILY_ARM_TYPHOON;
    }

    private static final int CPUFAMILY_ARM_HURRICANE = (int) 1741614739L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_HURRICANE 1741614739
     * }
     */
    public static int CPUFAMILY_ARM_HURRICANE() {
        return CPUFAMILY_ARM_HURRICANE;
    }

    private static final int CPUFAMILY_ARM_VORTEX_TEMPEST = (int) 131287967L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_VORTEX_TEMPEST 131287967
     * }
     */
    public static int CPUFAMILY_ARM_VORTEX_TEMPEST() {
        return CPUFAMILY_ARM_VORTEX_TEMPEST;
    }

    private static final int CPUFAMILY_ARM_LIGHTNING_THUNDER = (int) 1176831186L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_LIGHTNING_THUNDER 1176831186
     * }
     */
    public static int CPUFAMILY_ARM_LIGHTNING_THUNDER() {
        return CPUFAMILY_ARM_LIGHTNING_THUNDER;
    }

    private static final int CPUFAMILY_ARM_FIRESTORM_ICESTORM = (int) 458787763L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_FIRESTORM_ICESTORM 458787763
     * }
     */
    public static int CPUFAMILY_ARM_FIRESTORM_ICESTORM() {
        return CPUFAMILY_ARM_FIRESTORM_ICESTORM;
    }

    private static final int CPUFAMILY_ARM_PALMA = (int) 1912690738L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_PALMA 1912690738
     * }
     */
    public static int CPUFAMILY_ARM_PALMA() {
        return CPUFAMILY_ARM_PALMA;
    }

    private static final int CPUFAMILY_ARM_COLL = (int) 678884789L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_COLL 678884789
     * }
     */
    public static int CPUFAMILY_ARM_COLL() {
        return CPUFAMILY_ARM_COLL;
    }

    private static final int CPUFAMILY_ARM_LOBOS = (int) 1598941843L;
    /**
     * {@snippet lang=c :
     * #define CPUFAMILY_ARM_LOBOS 1598941843
     * }
     */
    public static int CPUFAMILY_ARM_LOBOS() {
        return CPUFAMILY_ARM_LOBOS;
    }

    private static final int CPUSUBFAMILY_UNKNOWN = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_UNKNOWN 0
     * }
     */
    public static int CPUSUBFAMILY_UNKNOWN() {
        return CPUSUBFAMILY_UNKNOWN;
    }

    private static final int CPUSUBFAMILY_ARM_HP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_HP 1
     * }
     */
    public static int CPUSUBFAMILY_ARM_HP() {
        return CPUSUBFAMILY_ARM_HP;
    }

    private static final int CPUSUBFAMILY_ARM_HG = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_HG 2
     * }
     */
    public static int CPUSUBFAMILY_ARM_HG() {
        return CPUSUBFAMILY_ARM_HG;
    }

    private static final int CPUSUBFAMILY_ARM_M = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_M 3
     * }
     */
    public static int CPUSUBFAMILY_ARM_M() {
        return CPUSUBFAMILY_ARM_M;
    }

    private static final int CPUSUBFAMILY_ARM_HS = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_HS 4
     * }
     */
    public static int CPUSUBFAMILY_ARM_HS() {
        return CPUSUBFAMILY_ARM_HS;
    }

    private static final int CPUSUBFAMILY_ARM_HC_HD = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_HC_HD 5
     * }
     */
    public static int CPUSUBFAMILY_ARM_HC_HD() {
        return CPUSUBFAMILY_ARM_HC_HD;
    }

    private static final int CPUSUBFAMILY_ARM_HA = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define CPUSUBFAMILY_ARM_HA 6
     * }
     */
    public static int CPUSUBFAMILY_ARM_HA() {
        return CPUSUBFAMILY_ARM_HA;
    }

    private static final int PROC_ALL_PIDS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_ALL_PIDS 1
     * }
     */
    public static int PROC_ALL_PIDS() {
        return PROC_ALL_PIDS;
    }

    private static final int PROC_PGRP_ONLY = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_PGRP_ONLY 2
     * }
     */
    public static int PROC_PGRP_ONLY() {
        return PROC_PGRP_ONLY;
    }

    private static final int PROC_TTY_ONLY = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_TTY_ONLY 3
     * }
     */
    public static int PROC_TTY_ONLY() {
        return PROC_TTY_ONLY;
    }

    private static final int PROC_UID_ONLY = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_UID_ONLY 4
     * }
     */
    public static int PROC_UID_ONLY() {
        return PROC_UID_ONLY;
    }

    private static final int PROC_RUID_ONLY = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define PROC_RUID_ONLY 5
     * }
     */
    public static int PROC_RUID_ONLY() {
        return PROC_RUID_ONLY;
    }

    private static final int PROC_PPID_ONLY = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define PROC_PPID_ONLY 6
     * }
     */
    public static int PROC_PPID_ONLY() {
        return PROC_PPID_ONLY;
    }

    private static final int PROC_KDBG_ONLY = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define PROC_KDBG_ONLY 7
     * }
     */
    public static int PROC_KDBG_ONLY() {
        return PROC_KDBG_ONLY;
    }

    private static final int PROC_FLAG_SYSTEM = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_SYSTEM 1
     * }
     */
    public static int PROC_FLAG_SYSTEM() {
        return PROC_FLAG_SYSTEM;
    }

    private static final int PROC_FLAG_TRACED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_TRACED 2
     * }
     */
    public static int PROC_FLAG_TRACED() {
        return PROC_FLAG_TRACED;
    }

    private static final int PROC_FLAG_INEXIT = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_INEXIT 4
     * }
     */
    public static int PROC_FLAG_INEXIT() {
        return PROC_FLAG_INEXIT;
    }

    private static final int PROC_FLAG_PPWAIT = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PPWAIT 8
     * }
     */
    public static int PROC_FLAG_PPWAIT() {
        return PROC_FLAG_PPWAIT;
    }

    private static final int PROC_FLAG_LP64 = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_LP64 16
     * }
     */
    public static int PROC_FLAG_LP64() {
        return PROC_FLAG_LP64;
    }

    private static final int PROC_FLAG_SLEADER = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_SLEADER 32
     * }
     */
    public static int PROC_FLAG_SLEADER() {
        return PROC_FLAG_SLEADER;
    }

    private static final int PROC_FLAG_CTTY = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_CTTY 64
     * }
     */
    public static int PROC_FLAG_CTTY() {
        return PROC_FLAG_CTTY;
    }

    private static final int PROC_FLAG_CONTROLT = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_CONTROLT 128
     * }
     */
    public static int PROC_FLAG_CONTROLT() {
        return PROC_FLAG_CONTROLT;
    }

    private static final int PROC_FLAG_THCWD = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_THCWD 256
     * }
     */
    public static int PROC_FLAG_THCWD() {
        return PROC_FLAG_THCWD;
    }

    private static final int PROC_FLAG_PC_THROTTLE = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PC_THROTTLE 512
     * }
     */
    public static int PROC_FLAG_PC_THROTTLE() {
        return PROC_FLAG_PC_THROTTLE;
    }

    private static final int PROC_FLAG_PC_SUSP = (int) 1024L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PC_SUSP 1024
     * }
     */
    public static int PROC_FLAG_PC_SUSP() {
        return PROC_FLAG_PC_SUSP;
    }

    private static final int PROC_FLAG_PC_KILL = (int) 1536L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PC_KILL 1536
     * }
     */
    public static int PROC_FLAG_PC_KILL() {
        return PROC_FLAG_PC_KILL;
    }

    private static final int PROC_FLAG_PC_MASK = (int) 1536L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PC_MASK 1536
     * }
     */
    public static int PROC_FLAG_PC_MASK() {
        return PROC_FLAG_PC_MASK;
    }

    private static final int PROC_FLAG_PA_THROTTLE = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PA_THROTTLE 2048
     * }
     */
    public static int PROC_FLAG_PA_THROTTLE() {
        return PROC_FLAG_PA_THROTTLE;
    }

    private static final int PROC_FLAG_PA_SUSP = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PA_SUSP 4096
     * }
     */
    public static int PROC_FLAG_PA_SUSP() {
        return PROC_FLAG_PA_SUSP;
    }

    private static final int PROC_FLAG_PSUGID = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_PSUGID 8192
     * }
     */
    public static int PROC_FLAG_PSUGID() {
        return PROC_FLAG_PSUGID;
    }

    private static final int PROC_FLAG_EXEC = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define PROC_FLAG_EXEC 16384
     * }
     */
    public static int PROC_FLAG_EXEC() {
        return PROC_FLAG_EXEC;
    }

    private static final int MAXTHREADNAMESIZE = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define MAXTHREADNAMESIZE 64
     * }
     */
    public static int MAXTHREADNAMESIZE() {
        return MAXTHREADNAMESIZE;
    }

    private static final int PROC_REGION_SUBMAP = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_REGION_SUBMAP 1
     * }
     */
    public static int PROC_REGION_SUBMAP() {
        return PROC_REGION_SUBMAP;
    }

    private static final int PROC_REGION_SHARED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_REGION_SHARED 2
     * }
     */
    public static int PROC_REGION_SHARED() {
        return PROC_REGION_SHARED;
    }

    private static final int SM_COW = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SM_COW 1
     * }
     */
    public static int SM_COW() {
        return SM_COW;
    }

    private static final int SM_PRIVATE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SM_PRIVATE 2
     * }
     */
    public static int SM_PRIVATE() {
        return SM_PRIVATE;
    }

    private static final int SM_EMPTY = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define SM_EMPTY 3
     * }
     */
    public static int SM_EMPTY() {
        return SM_EMPTY;
    }

    private static final int SM_SHARED = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define SM_SHARED 4
     * }
     */
    public static int SM_SHARED() {
        return SM_SHARED;
    }

    private static final int SM_TRUESHARED = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define SM_TRUESHARED 5
     * }
     */
    public static int SM_TRUESHARED() {
        return SM_TRUESHARED;
    }

    private static final int SM_PRIVATE_ALIASED = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define SM_PRIVATE_ALIASED 6
     * }
     */
    public static int SM_PRIVATE_ALIASED() {
        return SM_PRIVATE_ALIASED;
    }

    private static final int SM_SHARED_ALIASED = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define SM_SHARED_ALIASED 7
     * }
     */
    public static int SM_SHARED_ALIASED() {
        return SM_SHARED_ALIASED;
    }

    private static final int SM_LARGE_PAGE = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define SM_LARGE_PAGE 8
     * }
     */
    public static int SM_LARGE_PAGE() {
        return SM_LARGE_PAGE;
    }

    private static final int TH_STATE_RUNNING = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TH_STATE_RUNNING 1
     * }
     */
    public static int TH_STATE_RUNNING() {
        return TH_STATE_RUNNING;
    }

    private static final int TH_STATE_STOPPED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TH_STATE_STOPPED 2
     * }
     */
    public static int TH_STATE_STOPPED() {
        return TH_STATE_STOPPED;
    }

    private static final int TH_STATE_WAITING = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TH_STATE_WAITING 3
     * }
     */
    public static int TH_STATE_WAITING() {
        return TH_STATE_WAITING;
    }

    private static final int TH_STATE_UNINTERRUPTIBLE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TH_STATE_UNINTERRUPTIBLE 4
     * }
     */
    public static int TH_STATE_UNINTERRUPTIBLE() {
        return TH_STATE_UNINTERRUPTIBLE;
    }

    private static final int TH_STATE_HALTED = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define TH_STATE_HALTED 5
     * }
     */
    public static int TH_STATE_HALTED() {
        return TH_STATE_HALTED;
    }

    private static final int TH_FLAGS_SWAPPED = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TH_FLAGS_SWAPPED 1
     * }
     */
    public static int TH_FLAGS_SWAPPED() {
        return TH_FLAGS_SWAPPED;
    }

    private static final int TH_FLAGS_IDLE = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TH_FLAGS_IDLE 2
     * }
     */
    public static int TH_FLAGS_IDLE() {
        return TH_FLAGS_IDLE;
    }

    private static final int WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT 1
     * }
     */
    public static int WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT() {
        return WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT;
    }

    private static final int WQ_EXCEEDED_TOTAL_THREAD_LIMIT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define WQ_EXCEEDED_TOTAL_THREAD_LIMIT 2
     * }
     */
    public static int WQ_EXCEEDED_TOTAL_THREAD_LIMIT() {
        return WQ_EXCEEDED_TOTAL_THREAD_LIMIT;
    }

    private static final int WQ_FLAGS_AVAILABLE = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define WQ_FLAGS_AVAILABLE 4
     * }
     */
    public static int WQ_FLAGS_AVAILABLE() {
        return WQ_FLAGS_AVAILABLE;
    }

    private static final int PROC_FP_SHARED = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_FP_SHARED 1
     * }
     */
    public static int PROC_FP_SHARED() {
        return PROC_FP_SHARED;
    }

    private static final int PROC_FP_CLEXEC = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_FP_CLEXEC 2
     * }
     */
    public static int PROC_FP_CLEXEC() {
        return PROC_FP_CLEXEC;
    }

    private static final int PROC_FP_GUARDED = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_FP_GUARDED 4
     * }
     */
    public static int PROC_FP_GUARDED() {
        return PROC_FP_GUARDED;
    }

    private static final int PROC_FP_CLFORK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_FP_CLFORK 8
     * }
     */
    public static int PROC_FP_CLFORK() {
        return PROC_FP_CLFORK;
    }

    private static final int INI_IPV4 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define INI_IPV4 1
     * }
     */
    public static int INI_IPV4() {
        return INI_IPV4;
    }

    private static final int INI_IPV6 = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define INI_IPV6 2
     * }
     */
    public static int INI_IPV6() {
        return INI_IPV6;
    }

    private static final int TSI_T_REXMT = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define TSI_T_REXMT 0
     * }
     */
    public static int TSI_T_REXMT() {
        return TSI_T_REXMT;
    }

    private static final int TSI_T_PERSIST = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TSI_T_PERSIST 1
     * }
     */
    public static int TSI_T_PERSIST() {
        return TSI_T_PERSIST;
    }

    private static final int TSI_T_KEEP = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TSI_T_KEEP 2
     * }
     */
    public static int TSI_T_KEEP() {
        return TSI_T_KEEP;
    }

    private static final int TSI_T_2MSL = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TSI_T_2MSL 3
     * }
     */
    public static int TSI_T_2MSL() {
        return TSI_T_2MSL;
    }

    private static final int TSI_T_NTIMERS = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TSI_T_NTIMERS 4
     * }
     */
    public static int TSI_T_NTIMERS() {
        return TSI_T_NTIMERS;
    }

    private static final int TSI_S_CLOSED = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_CLOSED 0
     * }
     */
    public static int TSI_S_CLOSED() {
        return TSI_S_CLOSED;
    }

    private static final int TSI_S_LISTEN = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_LISTEN 1
     * }
     */
    public static int TSI_S_LISTEN() {
        return TSI_S_LISTEN;
    }

    private static final int TSI_S_SYN_SENT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_SYN_SENT 2
     * }
     */
    public static int TSI_S_SYN_SENT() {
        return TSI_S_SYN_SENT;
    }

    private static final int TSI_S_SYN_RECEIVED = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_SYN_RECEIVED 3
     * }
     */
    public static int TSI_S_SYN_RECEIVED() {
        return TSI_S_SYN_RECEIVED;
    }

    private static final int TSI_S_ESTABLISHED = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_ESTABLISHED 4
     * }
     */
    public static int TSI_S_ESTABLISHED() {
        return TSI_S_ESTABLISHED;
    }

    private static final int TSI_S__CLOSE_WAIT = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define TSI_S__CLOSE_WAIT 5
     * }
     */
    public static int TSI_S__CLOSE_WAIT() {
        return TSI_S__CLOSE_WAIT;
    }

    private static final int TSI_S_FIN_WAIT_1 = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_FIN_WAIT_1 6
     * }
     */
    public static int TSI_S_FIN_WAIT_1() {
        return TSI_S_FIN_WAIT_1;
    }

    private static final int TSI_S_CLOSING = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_CLOSING 7
     * }
     */
    public static int TSI_S_CLOSING() {
        return TSI_S_CLOSING;
    }

    private static final int TSI_S_LAST_ACK = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_LAST_ACK 8
     * }
     */
    public static int TSI_S_LAST_ACK() {
        return TSI_S_LAST_ACK;
    }

    private static final int TSI_S_FIN_WAIT_2 = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_FIN_WAIT_2 9
     * }
     */
    public static int TSI_S_FIN_WAIT_2() {
        return TSI_S_FIN_WAIT_2;
    }

    private static final int TSI_S_TIME_WAIT = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_TIME_WAIT 10
     * }
     */
    public static int TSI_S_TIME_WAIT() {
        return TSI_S_TIME_WAIT;
    }

    private static final int TSI_S_RESERVED = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define TSI_S_RESERVED 11
     * }
     */
    public static int TSI_S_RESERVED() {
        return TSI_S_RESERVED;
    }

    private static final int SOI_S_NOFDREF = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_NOFDREF 1
     * }
     */
    public static int SOI_S_NOFDREF() {
        return SOI_S_NOFDREF;
    }

    private static final int SOI_S_ISCONNECTED = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_ISCONNECTED 2
     * }
     */
    public static int SOI_S_ISCONNECTED() {
        return SOI_S_ISCONNECTED;
    }

    private static final int SOI_S_ISCONNECTING = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_ISCONNECTING 4
     * }
     */
    public static int SOI_S_ISCONNECTING() {
        return SOI_S_ISCONNECTING;
    }

    private static final int SOI_S_ISDISCONNECTING = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_ISDISCONNECTING 8
     * }
     */
    public static int SOI_S_ISDISCONNECTING() {
        return SOI_S_ISDISCONNECTING;
    }

    private static final int SOI_S_CANTSENDMORE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_CANTSENDMORE 16
     * }
     */
    public static int SOI_S_CANTSENDMORE() {
        return SOI_S_CANTSENDMORE;
    }

    private static final int SOI_S_CANTRCVMORE = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_CANTRCVMORE 32
     * }
     */
    public static int SOI_S_CANTRCVMORE() {
        return SOI_S_CANTRCVMORE;
    }

    private static final int SOI_S_RCVATMARK = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_RCVATMARK 64
     * }
     */
    public static int SOI_S_RCVATMARK() {
        return SOI_S_RCVATMARK;
    }

    private static final int SOI_S_PRIV = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_PRIV 128
     * }
     */
    public static int SOI_S_PRIV() {
        return SOI_S_PRIV;
    }

    private static final int SOI_S_NBIO = (int) 256L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_NBIO 256
     * }
     */
    public static int SOI_S_NBIO() {
        return SOI_S_NBIO;
    }

    private static final int SOI_S_ASYNC = (int) 512L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_ASYNC 512
     * }
     */
    public static int SOI_S_ASYNC() {
        return SOI_S_ASYNC;
    }

    private static final int SOI_S_INCOMP = (int) 2048L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_INCOMP 2048
     * }
     */
    public static int SOI_S_INCOMP() {
        return SOI_S_INCOMP;
    }

    private static final int SOI_S_COMP = (int) 4096L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_COMP 4096
     * }
     */
    public static int SOI_S_COMP() {
        return SOI_S_COMP;
    }

    private static final int SOI_S_ISDISCONNECTED = (int) 8192L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_ISDISCONNECTED 8192
     * }
     */
    public static int SOI_S_ISDISCONNECTED() {
        return SOI_S_ISDISCONNECTED;
    }

    private static final int SOI_S_DRAINING = (int) 16384L;
    /**
     * {@snippet lang=c :
     * #define SOI_S_DRAINING 16384
     * }
     */
    public static int SOI_S_DRAINING() {
        return SOI_S_DRAINING;
    }

    private static final int PROC_KQUEUE_SELECT = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_KQUEUE_SELECT 1
     * }
     */
    public static int PROC_KQUEUE_SELECT() {
        return PROC_KQUEUE_SELECT;
    }

    private static final int PROC_KQUEUE_SLEEP = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_KQUEUE_SLEEP 2
     * }
     */
    public static int PROC_KQUEUE_SLEEP() {
        return PROC_KQUEUE_SLEEP;
    }

    private static final int PROC_KQUEUE_32 = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_KQUEUE_32 8
     * }
     */
    public static int PROC_KQUEUE_32() {
        return PROC_KQUEUE_32;
    }

    private static final int PROC_KQUEUE_64 = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define PROC_KQUEUE_64 16
     * }
     */
    public static int PROC_KQUEUE_64() {
        return PROC_KQUEUE_64;
    }

    private static final int PROC_KQUEUE_QOS = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define PROC_KQUEUE_QOS 32
     * }
     */
    public static int PROC_KQUEUE_QOS() {
        return PROC_KQUEUE_QOS;
    }

    private static final int PROX_FDTYPE_ATALK = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_ATALK 0
     * }
     */
    public static int PROX_FDTYPE_ATALK() {
        return PROX_FDTYPE_ATALK;
    }

    private static final int PROX_FDTYPE_VNODE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_VNODE 1
     * }
     */
    public static int PROX_FDTYPE_VNODE() {
        return PROX_FDTYPE_VNODE;
    }

    private static final int PROX_FDTYPE_SOCKET = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_SOCKET 2
     * }
     */
    public static int PROX_FDTYPE_SOCKET() {
        return PROX_FDTYPE_SOCKET;
    }

    private static final int PROX_FDTYPE_PSHM = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_PSHM 3
     * }
     */
    public static int PROX_FDTYPE_PSHM() {
        return PROX_FDTYPE_PSHM;
    }

    private static final int PROX_FDTYPE_PSEM = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_PSEM 4
     * }
     */
    public static int PROX_FDTYPE_PSEM() {
        return PROX_FDTYPE_PSEM;
    }

    private static final int PROX_FDTYPE_KQUEUE = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_KQUEUE 5
     * }
     */
    public static int PROX_FDTYPE_KQUEUE() {
        return PROX_FDTYPE_KQUEUE;
    }

    private static final int PROX_FDTYPE_PIPE = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_PIPE 6
     * }
     */
    public static int PROX_FDTYPE_PIPE() {
        return PROX_FDTYPE_PIPE;
    }

    private static final int PROX_FDTYPE_FSEVENTS = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_FSEVENTS 7
     * }
     */
    public static int PROX_FDTYPE_FSEVENTS() {
        return PROX_FDTYPE_FSEVENTS;
    }

    private static final int PROX_FDTYPE_NETPOLICY = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_NETPOLICY 9
     * }
     */
    public static int PROX_FDTYPE_NETPOLICY() {
        return PROX_FDTYPE_NETPOLICY;
    }

    private static final int PROX_FDTYPE_CHANNEL = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_CHANNEL 10
     * }
     */
    public static int PROX_FDTYPE_CHANNEL() {
        return PROX_FDTYPE_CHANNEL;
    }

    private static final int PROX_FDTYPE_NEXUS = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define PROX_FDTYPE_NEXUS 11
     * }
     */
    public static int PROX_FDTYPE_NEXUS() {
        return PROX_FDTYPE_NEXUS;
    }

    private static final int PROC_CHANNEL_TYPE_USER_PIPE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_TYPE_USER_PIPE 0
     * }
     */
    public static int PROC_CHANNEL_TYPE_USER_PIPE() {
        return PROC_CHANNEL_TYPE_USER_PIPE;
    }

    private static final int PROC_CHANNEL_TYPE_KERNEL_PIPE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_TYPE_KERNEL_PIPE 1
     * }
     */
    public static int PROC_CHANNEL_TYPE_KERNEL_PIPE() {
        return PROC_CHANNEL_TYPE_KERNEL_PIPE;
    }

    private static final int PROC_CHANNEL_TYPE_NET_IF = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_TYPE_NET_IF 2
     * }
     */
    public static int PROC_CHANNEL_TYPE_NET_IF() {
        return PROC_CHANNEL_TYPE_NET_IF;
    }

    private static final int PROC_CHANNEL_TYPE_FLOW_SWITCH = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_TYPE_FLOW_SWITCH 3
     * }
     */
    public static int PROC_CHANNEL_TYPE_FLOW_SWITCH() {
        return PROC_CHANNEL_TYPE_FLOW_SWITCH;
    }

    private static final int PROC_CHANNEL_FLAGS_MONITOR_TX = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_MONITOR_TX 1
     * }
     */
    public static int PROC_CHANNEL_FLAGS_MONITOR_TX() {
        return PROC_CHANNEL_FLAGS_MONITOR_TX;
    }

    private static final int PROC_CHANNEL_FLAGS_MONITOR_RX = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_MONITOR_RX 2
     * }
     */
    public static int PROC_CHANNEL_FLAGS_MONITOR_RX() {
        return PROC_CHANNEL_FLAGS_MONITOR_RX;
    }

    private static final int PROC_CHANNEL_FLAGS_MONITOR_NO_COPY = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_MONITOR_NO_COPY 4
     * }
     */
    public static int PROC_CHANNEL_FLAGS_MONITOR_NO_COPY() {
        return PROC_CHANNEL_FLAGS_MONITOR_NO_COPY;
    }

    private static final int PROC_CHANNEL_FLAGS_EXCLUSIVE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_EXCLUSIVE 16
     * }
     */
    public static int PROC_CHANNEL_FLAGS_EXCLUSIVE() {
        return PROC_CHANNEL_FLAGS_EXCLUSIVE;
    }

    private static final int PROC_CHANNEL_FLAGS_USER_PACKET_POOL = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_USER_PACKET_POOL 32
     * }
     */
    public static int PROC_CHANNEL_FLAGS_USER_PACKET_POOL() {
        return PROC_CHANNEL_FLAGS_USER_PACKET_POOL;
    }

    private static final int PROC_CHANNEL_FLAGS_DEFUNCT_OK = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_DEFUNCT_OK 64
     * }
     */
    public static int PROC_CHANNEL_FLAGS_DEFUNCT_OK() {
        return PROC_CHANNEL_FLAGS_DEFUNCT_OK;
    }

    private static final int PROC_CHANNEL_FLAGS_LOW_LATENCY = (int) 128L;
    /**
     * {@snippet lang=c :
     * #define PROC_CHANNEL_FLAGS_LOW_LATENCY 128
     * }
     */
    public static int PROC_CHANNEL_FLAGS_LOW_LATENCY() {
        return PROC_CHANNEL_FLAGS_LOW_LATENCY;
    }

    private static final int PROC_PIDLISTFDS = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDLISTFDS 1
     * }
     */
    public static int PROC_PIDLISTFDS() {
        return PROC_PIDLISTFDS;
    }

    private static final int PROC_PIDTASKALLINFO = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTASKALLINFO 2
     * }
     */
    public static int PROC_PIDTASKALLINFO() {
        return PROC_PIDTASKALLINFO;
    }

    private static final int PROC_PIDTBSDINFO = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTBSDINFO 3
     * }
     */
    public static int PROC_PIDTBSDINFO() {
        return PROC_PIDTBSDINFO;
    }

    private static final int PROC_PIDTASKINFO = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTASKINFO 4
     * }
     */
    public static int PROC_PIDTASKINFO() {
        return PROC_PIDTASKINFO;
    }

    private static final int PROC_PIDTHREADINFO = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTHREADINFO 5
     * }
     */
    public static int PROC_PIDTHREADINFO() {
        return PROC_PIDTHREADINFO;
    }

    private static final int PROC_PIDLISTTHREADS = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDLISTTHREADS 6
     * }
     */
    public static int PROC_PIDLISTTHREADS() {
        return PROC_PIDLISTTHREADS;
    }

    private static final int PROC_PIDREGIONINFO = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDREGIONINFO 7
     * }
     */
    public static int PROC_PIDREGIONINFO() {
        return PROC_PIDREGIONINFO;
    }

    private static final int PROC_PIDREGIONPATHINFO = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDREGIONPATHINFO 8
     * }
     */
    public static int PROC_PIDREGIONPATHINFO() {
        return PROC_PIDREGIONPATHINFO;
    }

    private static final int PROC_PIDVNODEPATHINFO = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDVNODEPATHINFO 9
     * }
     */
    public static int PROC_PIDVNODEPATHINFO() {
        return PROC_PIDVNODEPATHINFO;
    }

    private static final int PROC_PIDTHREADPATHINFO = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTHREADPATHINFO 10
     * }
     */
    public static int PROC_PIDTHREADPATHINFO() {
        return PROC_PIDTHREADPATHINFO;
    }

    private static final int PROC_PIDPATHINFO = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDPATHINFO 11
     * }
     */
    public static int PROC_PIDPATHINFO() {
        return PROC_PIDPATHINFO;
    }

    private static final int PROC_PIDWORKQUEUEINFO = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDWORKQUEUEINFO 12
     * }
     */
    public static int PROC_PIDWORKQUEUEINFO() {
        return PROC_PIDWORKQUEUEINFO;
    }

    private static final int PROC_PIDT_SHORTBSDINFO = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDT_SHORTBSDINFO 13
     * }
     */
    public static int PROC_PIDT_SHORTBSDINFO() {
        return PROC_PIDT_SHORTBSDINFO;
    }

    private static final int PROC_PIDLISTFILEPORTS = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDLISTFILEPORTS 14
     * }
     */
    public static int PROC_PIDLISTFILEPORTS() {
        return PROC_PIDLISTFILEPORTS;
    }

    private static final int PROC_PIDTHREADID64INFO = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDTHREADID64INFO 15
     * }
     */
    public static int PROC_PIDTHREADID64INFO() {
        return PROC_PIDTHREADID64INFO;
    }

    private static final int PROC_PID_RUSAGE = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define PROC_PID_RUSAGE 16
     * }
     */
    public static int PROC_PID_RUSAGE() {
        return PROC_PID_RUSAGE;
    }

    private static final int PROC_PID_RUSAGE_SIZE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define PROC_PID_RUSAGE_SIZE 0
     * }
     */
    public static int PROC_PID_RUSAGE_SIZE() {
        return PROC_PID_RUSAGE_SIZE;
    }

    private static final int PROC_PIDFDVNODEINFO = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDVNODEINFO 1
     * }
     */
    public static int PROC_PIDFDVNODEINFO() {
        return PROC_PIDFDVNODEINFO;
    }

    private static final int PROC_PIDFDVNODEPATHINFO = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDVNODEPATHINFO 2
     * }
     */
    public static int PROC_PIDFDVNODEPATHINFO() {
        return PROC_PIDFDVNODEPATHINFO;
    }

    private static final int PROC_PIDFDSOCKETINFO = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDSOCKETINFO 3
     * }
     */
    public static int PROC_PIDFDSOCKETINFO() {
        return PROC_PIDFDSOCKETINFO;
    }

    private static final int PROC_PIDFDPSEMINFO = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDPSEMINFO 4
     * }
     */
    public static int PROC_PIDFDPSEMINFO() {
        return PROC_PIDFDPSEMINFO;
    }

    private static final int PROC_PIDFDPSHMINFO = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDPSHMINFO 5
     * }
     */
    public static int PROC_PIDFDPSHMINFO() {
        return PROC_PIDFDPSHMINFO;
    }

    private static final int PROC_PIDFDPIPEINFO = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDPIPEINFO 6
     * }
     */
    public static int PROC_PIDFDPIPEINFO() {
        return PROC_PIDFDPIPEINFO;
    }

    private static final int PROC_PIDFDKQUEUEINFO = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDKQUEUEINFO 7
     * }
     */
    public static int PROC_PIDFDKQUEUEINFO() {
        return PROC_PIDFDKQUEUEINFO;
    }

    private static final int PROC_PIDFDATALKINFO = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDATALKINFO 8
     * }
     */
    public static int PROC_PIDFDATALKINFO() {
        return PROC_PIDFDATALKINFO;
    }

    private static final int PROC_PIDFDCHANNELINFO = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFDCHANNELINFO 10
     * }
     */
    public static int PROC_PIDFDCHANNELINFO() {
        return PROC_PIDFDCHANNELINFO;
    }

    private static final int PROC_PIDFILEPORTVNODEPATHINFO = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFILEPORTVNODEPATHINFO 2
     * }
     */
    public static int PROC_PIDFILEPORTVNODEPATHINFO() {
        return PROC_PIDFILEPORTVNODEPATHINFO;
    }

    private static final int PROC_PIDFILEPORTSOCKETINFO = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFILEPORTSOCKETINFO 3
     * }
     */
    public static int PROC_PIDFILEPORTSOCKETINFO() {
        return PROC_PIDFILEPORTSOCKETINFO;
    }

    private static final int PROC_PIDFILEPORTPSHMINFO = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFILEPORTPSHMINFO 5
     * }
     */
    public static int PROC_PIDFILEPORTPSHMINFO() {
        return PROC_PIDFILEPORTPSHMINFO;
    }

    private static final int PROC_PIDFILEPORTPIPEINFO = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define PROC_PIDFILEPORTPIPEINFO 6
     * }
     */
    public static int PROC_PIDFILEPORTPIPEINFO() {
        return PROC_PIDFILEPORTPIPEINFO;
    }

    private static final int PROC_SELFSET_PCONTROL = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_SELFSET_PCONTROL 1
     * }
     */
    public static int PROC_SELFSET_PCONTROL() {
        return PROC_SELFSET_PCONTROL;
    }

    private static final int PROC_SELFSET_THREADNAME = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_SELFSET_THREADNAME 2
     * }
     */
    public static int PROC_SELFSET_THREADNAME() {
        return PROC_SELFSET_THREADNAME;
    }

    private static final int PROC_SELFSET_VMRSRCOWNER = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_SELFSET_VMRSRCOWNER 3
     * }
     */
    public static int PROC_SELFSET_VMRSRCOWNER() {
        return PROC_SELFSET_VMRSRCOWNER;
    }

    private static final int PROC_SELFSET_DELAYIDLESLEEP = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_SELFSET_DELAYIDLESLEEP 4
     * }
     */
    public static int PROC_SELFSET_DELAYIDLESLEEP() {
        return PROC_SELFSET_DELAYIDLESLEEP;
    }

    private static final int PROC_DIRTYCONTROL_TRACK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTYCONTROL_TRACK 1
     * }
     */
    public static int PROC_DIRTYCONTROL_TRACK() {
        return PROC_DIRTYCONTROL_TRACK;
    }

    private static final int PROC_DIRTYCONTROL_SET = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTYCONTROL_SET 2
     * }
     */
    public static int PROC_DIRTYCONTROL_SET() {
        return PROC_DIRTYCONTROL_SET;
    }

    private static final int PROC_DIRTYCONTROL_GET = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTYCONTROL_GET 3
     * }
     */
    public static int PROC_DIRTYCONTROL_GET() {
        return PROC_DIRTYCONTROL_GET;
    }

    private static final int PROC_DIRTYCONTROL_CLEAR = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTYCONTROL_CLEAR 4
     * }
     */
    public static int PROC_DIRTYCONTROL_CLEAR() {
        return PROC_DIRTYCONTROL_CLEAR;
    }

    private static final int PROC_DIRTY_TRACK = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_TRACK 1
     * }
     */
    public static int PROC_DIRTY_TRACK() {
        return PROC_DIRTY_TRACK;
    }

    private static final int PROC_DIRTY_ALLOW_IDLE_EXIT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_ALLOW_IDLE_EXIT 2
     * }
     */
    public static int PROC_DIRTY_ALLOW_IDLE_EXIT() {
        return PROC_DIRTY_ALLOW_IDLE_EXIT;
    }

    private static final int PROC_DIRTY_DEFER = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_DEFER 4
     * }
     */
    public static int PROC_DIRTY_DEFER() {
        return PROC_DIRTY_DEFER;
    }

    private static final int PROC_DIRTY_LAUNCH_IN_PROGRESS = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_LAUNCH_IN_PROGRESS 8
     * }
     */
    public static int PROC_DIRTY_LAUNCH_IN_PROGRESS() {
        return PROC_DIRTY_LAUNCH_IN_PROGRESS;
    }

    private static final int PROC_DIRTY_DEFER_ALWAYS = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_DEFER_ALWAYS 16
     * }
     */
    public static int PROC_DIRTY_DEFER_ALWAYS() {
        return PROC_DIRTY_DEFER_ALWAYS;
    }

    private static final int PROC_DIRTY_TRACKED = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_TRACKED 1
     * }
     */
    public static int PROC_DIRTY_TRACKED() {
        return PROC_DIRTY_TRACKED;
    }

    private static final int PROC_DIRTY_ALLOWS_IDLE_EXIT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_ALLOWS_IDLE_EXIT 2
     * }
     */
    public static int PROC_DIRTY_ALLOWS_IDLE_EXIT() {
        return PROC_DIRTY_ALLOWS_IDLE_EXIT;
    }

    private static final int PROC_DIRTY_IS_DIRTY = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_IS_DIRTY 4
     * }
     */
    public static int PROC_DIRTY_IS_DIRTY() {
        return PROC_DIRTY_IS_DIRTY;
    }

    private static final int PROC_DIRTY_LAUNCH_IS_IN_PROGRESS = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define PROC_DIRTY_LAUNCH_IS_IN_PROGRESS 8
     * }
     */
    public static int PROC_DIRTY_LAUNCH_IS_IN_PROGRESS() {
        return PROC_DIRTY_LAUNCH_IS_IN_PROGRESS;
    }

    private static final int PROC_UDATA_INFO_GET = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define PROC_UDATA_INFO_GET 1
     * }
     */
    public static int PROC_UDATA_INFO_GET() {
        return PROC_UDATA_INFO_GET;
    }

    private static final int PROC_UDATA_INFO_SET = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define PROC_UDATA_INFO_SET 2
     * }
     */
    public static int PROC_UDATA_INFO_SET() {
        return PROC_UDATA_INFO_SET;
    }
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = proc_info_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = proc_info_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = proc_info_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = proc_info_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = proc_info_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = proc_info_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = proc_info_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = proc_info_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = proc_info_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = proc_info_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = proc_info_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = proc_info_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = proc_info_h.C_INT;
}
