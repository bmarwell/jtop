/*
 * Copyright (C) 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.bmarwell.jtop.lib.osx.ffm; // Generated by jextract

import static java.lang.foreign.ValueLayout.JAVA_BYTE;
import static java.lang.foreign.ValueLayout.OfInt;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.PaddingLayout;
import java.lang.foreign.SequenceLayout;
import java.lang.foreign.StructLayout;
import java.lang.foreign.SymbolLookup;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

public class errno_h {

    errno_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
        String traceArgs = Arrays.stream(args).map(Object::toString).collect(Collectors.joining(", "));
        System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol).orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers =
                        g.memberLayouts().stream().map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout
                        ? MemoryLayout.structLayout(alignedMembers)
                        : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP =
            SymbolLookup.loaderLookup().or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER =
            ValueLayout.ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __has_safe_buffers = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }

    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }

    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }

    private static final int __DARWIN_ONLY_VERS_1050 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }

    private static final int __DARWIN_UNIX03 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }

    private static final int __DARWIN_64_BIT_INO_T = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }

    private static final int __DARWIN_VERS_1050 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }

    private static final int __DARWIN_NON_CANCELABLE = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }

    private static final int __STDC_WANT_LIB_EXT1__ = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }

    private static final int __DARWIN_NO_LONG_LONG = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }

    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }

    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }

    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }

    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }

    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }

    private static final int __has_ptrcheck = (int) 0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }

    public static final int EPERM = (int) 1L;
    /**
     * {@snippet lang=c :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return EPERM;
    }

    public static final int ENOENT = (int) 2L;
    /**
     * {@snippet lang=c :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return ENOENT;
    }

    private static final int ESRCH = (int) 3L;
    /**
     * {@snippet lang=c :
     * #define ESRCH 3
     * }
     */
    public static int ESRCH() {
        return ESRCH;
    }

    private static final int EINTR = (int) 4L;
    /**
     * {@snippet lang=c :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return EINTR;
    }

    private static final int EIO = (int) 5L;
    /**
     * {@snippet lang=c :
     * #define EIO 5
     * }
     */
    public static int EIO() {
        return EIO;
    }

    private static final int ENXIO = (int) 6L;
    /**
     * {@snippet lang=c :
     * #define ENXIO 6
     * }
     */
    public static int ENXIO() {
        return ENXIO;
    }

    private static final int E2BIG = (int) 7L;
    /**
     * {@snippet lang=c :
     * #define E2BIG 7
     * }
     */
    public static int E2BIG() {
        return E2BIG;
    }

    private static final int ENOEXEC = (int) 8L;
    /**
     * {@snippet lang=c :
     * #define ENOEXEC 8
     * }
     */
    public static int ENOEXEC() {
        return ENOEXEC;
    }

    private static final int EBADF = (int) 9L;
    /**
     * {@snippet lang=c :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return EBADF;
    }

    private static final int ECHILD = (int) 10L;
    /**
     * {@snippet lang=c :
     * #define ECHILD 10
     * }
     */
    public static int ECHILD() {
        return ECHILD;
    }

    private static final int EDEADLK = (int) 11L;
    /**
     * {@snippet lang=c :
     * #define EDEADLK 11
     * }
     */
    public static int EDEADLK() {
        return EDEADLK;
    }

    public static final int ENOMEM = (int) 12L;
    /**
     * {@snippet lang=c :
     * #define ENOMEM 12
     * }
     */
    public static int ENOMEM() {
        return ENOMEM;
    }

    private static final int EACCES = (int) 13L;
    /**
     * {@snippet lang=c :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return EACCES;
    }

    public static final int EFAULT = (int) 14L;
    /**
     * {@snippet lang=c :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return EFAULT;
    }

    private static final int ENOTBLK = (int) 15L;
    /**
     * {@snippet lang=c :
     * #define ENOTBLK 15
     * }
     */
    public static int ENOTBLK() {
        return ENOTBLK;
    }

    private static final int EBUSY = (int) 16L;
    /**
     * {@snippet lang=c :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return EBUSY;
    }

    private static final int EEXIST = (int) 17L;
    /**
     * {@snippet lang=c :
     * #define EEXIST 17
     * }
     */
    public static int EEXIST() {
        return EEXIST;
    }

    private static final int EXDEV = (int) 18L;
    /**
     * {@snippet lang=c :
     * #define EXDEV 18
     * }
     */
    public static int EXDEV() {
        return EXDEV;
    }

    private static final int ENODEV = (int) 19L;
    /**
     * {@snippet lang=c :
     * #define ENODEV 19
     * }
     */
    public static int ENODEV() {
        return ENODEV;
    }

    public static final int ENOTDIR = (int) 20L;
    /**
     * {@snippet lang=c :
     * #define ENOTDIR 20
     * }
     */
    public static int ENOTDIR() {
        return ENOTDIR;
    }

    public static final int EISDIR = (int) 21L;
    /**
     * {@snippet lang=c :
     * #define EISDIR 21
     * }
     */
    public static int EISDIR() {
        return EISDIR;
    }

    public static final int EINVAL = (int) 22L;
    /**
     * {@snippet lang=c :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return EINVAL;
    }

    private static final int ENFILE = (int) 23L;
    /**
     * {@snippet lang=c :
     * #define ENFILE 23
     * }
     */
    public static int ENFILE() {
        return ENFILE;
    }

    private static final int EMFILE = (int) 24L;
    /**
     * {@snippet lang=c :
     * #define EMFILE 24
     * }
     */
    public static int EMFILE() {
        return EMFILE;
    }

    private static final int ENOTTY = (int) 25L;
    /**
     * {@snippet lang=c :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return ENOTTY;
    }

    private static final int ETXTBSY = (int) 26L;
    /**
     * {@snippet lang=c :
     * #define ETXTBSY 26
     * }
     */
    public static int ETXTBSY() {
        return ETXTBSY;
    }

    private static final int EFBIG = (int) 27L;
    /**
     * {@snippet lang=c :
     * #define EFBIG 27
     * }
     */
    public static int EFBIG() {
        return EFBIG;
    }

    private static final int ENOSPC = (int) 28L;
    /**
     * {@snippet lang=c :
     * #define ENOSPC 28
     * }
     */
    public static int ENOSPC() {
        return ENOSPC;
    }

    private static final int ESPIPE = (int) 29L;
    /**
     * {@snippet lang=c :
     * #define ESPIPE 29
     * }
     */
    public static int ESPIPE() {
        return ESPIPE;
    }

    private static final int EROFS = (int) 30L;
    /**
     * {@snippet lang=c :
     * #define EROFS 30
     * }
     */
    public static int EROFS() {
        return EROFS;
    }

    private static final int EMLINK = (int) 31L;
    /**
     * {@snippet lang=c :
     * #define EMLINK 31
     * }
     */
    public static int EMLINK() {
        return EMLINK;
    }

    private static final int EPIPE = (int) 32L;
    /**
     * {@snippet lang=c :
     * #define EPIPE 32
     * }
     */
    public static int EPIPE() {
        return EPIPE;
    }

    private static final int EDOM = (int) 33L;
    /**
     * {@snippet lang=c :
     * #define EDOM 33
     * }
     */
    public static int EDOM() {
        return EDOM;
    }

    private static final int ERANGE = (int) 34L;
    /**
     * {@snippet lang=c :
     * #define ERANGE 34
     * }
     */
    public static int ERANGE() {
        return ERANGE;
    }

    private static final int EAGAIN = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define EAGAIN 35
     * }
     */
    public static int EAGAIN() {
        return EAGAIN;
    }

    private static final int EINPROGRESS = (int) 36L;
    /**
     * {@snippet lang=c :
     * #define EINPROGRESS 36
     * }
     */
    public static int EINPROGRESS() {
        return EINPROGRESS;
    }

    private static final int EALREADY = (int) 37L;
    /**
     * {@snippet lang=c :
     * #define EALREADY 37
     * }
     */
    public static int EALREADY() {
        return EALREADY;
    }

    private static final int ENOTSOCK = (int) 38L;
    /**
     * {@snippet lang=c :
     * #define ENOTSOCK 38
     * }
     */
    public static int ENOTSOCK() {
        return ENOTSOCK;
    }

    private static final int EDESTADDRREQ = (int) 39L;
    /**
     * {@snippet lang=c :
     * #define EDESTADDRREQ 39
     * }
     */
    public static int EDESTADDRREQ() {
        return EDESTADDRREQ;
    }

    private static final int EMSGSIZE = (int) 40L;
    /**
     * {@snippet lang=c :
     * #define EMSGSIZE 40
     * }
     */
    public static int EMSGSIZE() {
        return EMSGSIZE;
    }

    private static final int EPROTOTYPE = (int) 41L;
    /**
     * {@snippet lang=c :
     * #define EPROTOTYPE 41
     * }
     */
    public static int EPROTOTYPE() {
        return EPROTOTYPE;
    }

    private static final int ENOPROTOOPT = (int) 42L;
    /**
     * {@snippet lang=c :
     * #define ENOPROTOOPT 42
     * }
     */
    public static int ENOPROTOOPT() {
        return ENOPROTOOPT;
    }

    private static final int EPROTONOSUPPORT = (int) 43L;
    /**
     * {@snippet lang=c :
     * #define EPROTONOSUPPORT 43
     * }
     */
    public static int EPROTONOSUPPORT() {
        return EPROTONOSUPPORT;
    }

    private static final int ESOCKTNOSUPPORT = (int) 44L;
    /**
     * {@snippet lang=c :
     * #define ESOCKTNOSUPPORT 44
     * }
     */
    public static int ESOCKTNOSUPPORT() {
        return ESOCKTNOSUPPORT;
    }

    private static final int ENOTSUP = (int) 45L;
    /**
     * {@snippet lang=c :
     * #define ENOTSUP 45
     * }
     */
    public static int ENOTSUP() {
        return ENOTSUP;
    }

    private static final int EPFNOSUPPORT = (int) 46L;
    /**
     * {@snippet lang=c :
     * #define EPFNOSUPPORT 46
     * }
     */
    public static int EPFNOSUPPORT() {
        return EPFNOSUPPORT;
    }

    private static final int EAFNOSUPPORT = (int) 47L;
    /**
     * {@snippet lang=c :
     * #define EAFNOSUPPORT 47
     * }
     */
    public static int EAFNOSUPPORT() {
        return EAFNOSUPPORT;
    }

    private static final int EADDRINUSE = (int) 48L;
    /**
     * {@snippet lang=c :
     * #define EADDRINUSE 48
     * }
     */
    public static int EADDRINUSE() {
        return EADDRINUSE;
    }

    private static final int EADDRNOTAVAIL = (int) 49L;
    /**
     * {@snippet lang=c :
     * #define EADDRNOTAVAIL 49
     * }
     */
    public static int EADDRNOTAVAIL() {
        return EADDRNOTAVAIL;
    }

    private static final int ENETDOWN = (int) 50L;
    /**
     * {@snippet lang=c :
     * #define ENETDOWN 50
     * }
     */
    public static int ENETDOWN() {
        return ENETDOWN;
    }

    private static final int ENETUNREACH = (int) 51L;
    /**
     * {@snippet lang=c :
     * #define ENETUNREACH 51
     * }
     */
    public static int ENETUNREACH() {
        return ENETUNREACH;
    }

    private static final int ENETRESET = (int) 52L;
    /**
     * {@snippet lang=c :
     * #define ENETRESET 52
     * }
     */
    public static int ENETRESET() {
        return ENETRESET;
    }

    private static final int ECONNABORTED = (int) 53L;
    /**
     * {@snippet lang=c :
     * #define ECONNABORTED 53
     * }
     */
    public static int ECONNABORTED() {
        return ECONNABORTED;
    }

    private static final int ECONNRESET = (int) 54L;
    /**
     * {@snippet lang=c :
     * #define ECONNRESET 54
     * }
     */
    public static int ECONNRESET() {
        return ECONNRESET;
    }

    private static final int ENOBUFS = (int) 55L;
    /**
     * {@snippet lang=c :
     * #define ENOBUFS 55
     * }
     */
    public static int ENOBUFS() {
        return ENOBUFS;
    }

    private static final int EISCONN = (int) 56L;
    /**
     * {@snippet lang=c :
     * #define EISCONN 56
     * }
     */
    public static int EISCONN() {
        return EISCONN;
    }

    private static final int ENOTCONN = (int) 57L;
    /**
     * {@snippet lang=c :
     * #define ENOTCONN 57
     * }
     */
    public static int ENOTCONN() {
        return ENOTCONN;
    }

    private static final int ESHUTDOWN = (int) 58L;
    /**
     * {@snippet lang=c :
     * #define ESHUTDOWN 58
     * }
     */
    public static int ESHUTDOWN() {
        return ESHUTDOWN;
    }

    private static final int ETOOMANYREFS = (int) 59L;
    /**
     * {@snippet lang=c :
     * #define ETOOMANYREFS 59
     * }
     */
    public static int ETOOMANYREFS() {
        return ETOOMANYREFS;
    }

    private static final int ETIMEDOUT = (int) 60L;
    /**
     * {@snippet lang=c :
     * #define ETIMEDOUT 60
     * }
     */
    public static int ETIMEDOUT() {
        return ETIMEDOUT;
    }

    private static final int ECONNREFUSED = (int) 61L;
    /**
     * {@snippet lang=c :
     * #define ECONNREFUSED 61
     * }
     */
    public static int ECONNREFUSED() {
        return ECONNREFUSED;
    }

    private static final int ELOOP = (int) 62L;
    /**
     * {@snippet lang=c :
     * #define ELOOP 62
     * }
     */
    public static int ELOOP() {
        return ELOOP;
    }

    private static final int ENAMETOOLONG = (int) 63L;
    /**
     * {@snippet lang=c :
     * #define ENAMETOOLONG 63
     * }
     */
    public static int ENAMETOOLONG() {
        return ENAMETOOLONG;
    }

    private static final int EHOSTDOWN = (int) 64L;
    /**
     * {@snippet lang=c :
     * #define EHOSTDOWN 64
     * }
     */
    public static int EHOSTDOWN() {
        return EHOSTDOWN;
    }

    private static final int EHOSTUNREACH = (int) 65L;
    /**
     * {@snippet lang=c :
     * #define EHOSTUNREACH 65
     * }
     */
    public static int EHOSTUNREACH() {
        return EHOSTUNREACH;
    }

    private static final int ENOTEMPTY = (int) 66L;
    /**
     * {@snippet lang=c :
     * #define ENOTEMPTY 66
     * }
     */
    public static int ENOTEMPTY() {
        return ENOTEMPTY;
    }

    private static final int EPROCLIM = (int) 67L;
    /**
     * {@snippet lang=c :
     * #define EPROCLIM 67
     * }
     */
    public static int EPROCLIM() {
        return EPROCLIM;
    }

    private static final int EUSERS = (int) 68L;
    /**
     * {@snippet lang=c :
     * #define EUSERS 68
     * }
     */
    public static int EUSERS() {
        return EUSERS;
    }

    private static final int EDQUOT = (int) 69L;
    /**
     * {@snippet lang=c :
     * #define EDQUOT 69
     * }
     */
    public static int EDQUOT() {
        return EDQUOT;
    }

    private static final int ESTALE = (int) 70L;
    /**
     * {@snippet lang=c :
     * #define ESTALE 70
     * }
     */
    public static int ESTALE() {
        return ESTALE;
    }

    private static final int EREMOTE = (int) 71L;
    /**
     * {@snippet lang=c :
     * #define EREMOTE 71
     * }
     */
    public static int EREMOTE() {
        return EREMOTE;
    }

    private static final int EBADRPC = (int) 72L;
    /**
     * {@snippet lang=c :
     * #define EBADRPC 72
     * }
     */
    public static int EBADRPC() {
        return EBADRPC;
    }

    private static final int ERPCMISMATCH = (int) 73L;
    /**
     * {@snippet lang=c :
     * #define ERPCMISMATCH 73
     * }
     */
    public static int ERPCMISMATCH() {
        return ERPCMISMATCH;
    }

    private static final int EPROGUNAVAIL = (int) 74L;
    /**
     * {@snippet lang=c :
     * #define EPROGUNAVAIL 74
     * }
     */
    public static int EPROGUNAVAIL() {
        return EPROGUNAVAIL;
    }

    private static final int EPROGMISMATCH = (int) 75L;
    /**
     * {@snippet lang=c :
     * #define EPROGMISMATCH 75
     * }
     */
    public static int EPROGMISMATCH() {
        return EPROGMISMATCH;
    }

    private static final int EPROCUNAVAIL = (int) 76L;
    /**
     * {@snippet lang=c :
     * #define EPROCUNAVAIL 76
     * }
     */
    public static int EPROCUNAVAIL() {
        return EPROCUNAVAIL;
    }

    private static final int ENOLCK = (int) 77L;
    /**
     * {@snippet lang=c :
     * #define ENOLCK 77
     * }
     */
    public static int ENOLCK() {
        return ENOLCK;
    }

    private static final int ENOSYS = (int) 78L;
    /**
     * {@snippet lang=c :
     * #define ENOSYS 78
     * }
     */
    public static int ENOSYS() {
        return ENOSYS;
    }

    private static final int EFTYPE = (int) 79L;
    /**
     * {@snippet lang=c :
     * #define EFTYPE 79
     * }
     */
    public static int EFTYPE() {
        return EFTYPE;
    }

    private static final int EAUTH = (int) 80L;
    /**
     * {@snippet lang=c :
     * #define EAUTH 80
     * }
     */
    public static int EAUTH() {
        return EAUTH;
    }

    private static final int ENEEDAUTH = (int) 81L;
    /**
     * {@snippet lang=c :
     * #define ENEEDAUTH 81
     * }
     */
    public static int ENEEDAUTH() {
        return ENEEDAUTH;
    }

    private static final int EPWROFF = (int) 82L;
    /**
     * {@snippet lang=c :
     * #define EPWROFF 82
     * }
     */
    public static int EPWROFF() {
        return EPWROFF;
    }

    private static final int EDEVERR = (int) 83L;
    /**
     * {@snippet lang=c :
     * #define EDEVERR 83
     * }
     */
    public static int EDEVERR() {
        return EDEVERR;
    }

    private static final int EOVERFLOW = (int) 84L;
    /**
     * {@snippet lang=c :
     * #define EOVERFLOW 84
     * }
     */
    public static int EOVERFLOW() {
        return EOVERFLOW;
    }

    private static final int EBADEXEC = (int) 85L;
    /**
     * {@snippet lang=c :
     * #define EBADEXEC 85
     * }
     */
    public static int EBADEXEC() {
        return EBADEXEC;
    }

    private static final int EBADARCH = (int) 86L;
    /**
     * {@snippet lang=c :
     * #define EBADARCH 86
     * }
     */
    public static int EBADARCH() {
        return EBADARCH;
    }

    private static final int ESHLIBVERS = (int) 87L;
    /**
     * {@snippet lang=c :
     * #define ESHLIBVERS 87
     * }
     */
    public static int ESHLIBVERS() {
        return ESHLIBVERS;
    }

    private static final int EBADMACHO = (int) 88L;
    /**
     * {@snippet lang=c :
     * #define EBADMACHO 88
     * }
     */
    public static int EBADMACHO() {
        return EBADMACHO;
    }

    private static final int ECANCELED = (int) 89L;
    /**
     * {@snippet lang=c :
     * #define ECANCELED 89
     * }
     */
    public static int ECANCELED() {
        return ECANCELED;
    }

    private static final int EIDRM = (int) 90L;
    /**
     * {@snippet lang=c :
     * #define EIDRM 90
     * }
     */
    public static int EIDRM() {
        return EIDRM;
    }

    private static final int ENOMSG = (int) 91L;
    /**
     * {@snippet lang=c :
     * #define ENOMSG 91
     * }
     */
    public static int ENOMSG() {
        return ENOMSG;
    }

    private static final int EILSEQ = (int) 92L;
    /**
     * {@snippet lang=c :
     * #define EILSEQ 92
     * }
     */
    public static int EILSEQ() {
        return EILSEQ;
    }

    private static final int ENOATTR = (int) 93L;
    /**
     * {@snippet lang=c :
     * #define ENOATTR 93
     * }
     */
    public static int ENOATTR() {
        return ENOATTR;
    }

    private static final int EBADMSG = (int) 94L;
    /**
     * {@snippet lang=c :
     * #define EBADMSG 94
     * }
     */
    public static int EBADMSG() {
        return EBADMSG;
    }

    private static final int EMULTIHOP = (int) 95L;
    /**
     * {@snippet lang=c :
     * #define EMULTIHOP 95
     * }
     */
    public static int EMULTIHOP() {
        return EMULTIHOP;
    }

    private static final int ENODATA = (int) 96L;
    /**
     * {@snippet lang=c :
     * #define ENODATA 96
     * }
     */
    public static int ENODATA() {
        return ENODATA;
    }

    private static final int ENOLINK = (int) 97L;
    /**
     * {@snippet lang=c :
     * #define ENOLINK 97
     * }
     */
    public static int ENOLINK() {
        return ENOLINK;
    }

    private static final int ENOSR = (int) 98L;
    /**
     * {@snippet lang=c :
     * #define ENOSR 98
     * }
     */
    public static int ENOSR() {
        return ENOSR;
    }

    private static final int ENOSTR = (int) 99L;
    /**
     * {@snippet lang=c :
     * #define ENOSTR 99
     * }
     */
    public static int ENOSTR() {
        return ENOSTR;
    }

    private static final int EPROTO = (int) 100L;
    /**
     * {@snippet lang=c :
     * #define EPROTO 100
     * }
     */
    public static int EPROTO() {
        return EPROTO;
    }

    private static final int ETIME = (int) 101L;
    /**
     * {@snippet lang=c :
     * #define ETIME 101
     * }
     */
    public static int ETIME() {
        return ETIME;
    }

    private static final int EOPNOTSUPP = (int) 102L;
    /**
     * {@snippet lang=c :
     * #define EOPNOTSUPP 102
     * }
     */
    public static int EOPNOTSUPP() {
        return EOPNOTSUPP;
    }

    private static final int ENOPOLICY = (int) 103L;
    /**
     * {@snippet lang=c :
     * #define ENOPOLICY 103
     * }
     */
    public static int ENOPOLICY() {
        return ENOPOLICY;
    }

    private static final int ENOTRECOVERABLE = (int) 104L;
    /**
     * {@snippet lang=c :
     * #define ENOTRECOVERABLE 104
     * }
     */
    public static int ENOTRECOVERABLE() {
        return ENOTRECOVERABLE;
    }

    private static final int EOWNERDEAD = (int) 105L;
    /**
     * {@snippet lang=c :
     * #define EOWNERDEAD 105
     * }
     */
    public static int EOWNERDEAD() {
        return EOWNERDEAD;
    }

    private static final int EQFULL = (int) 106L;
    /**
     * {@snippet lang=c :
     * #define EQFULL 106
     * }
     */
    public static int EQFULL() {
        return EQFULL;
    }

    private static final int ELAST = (int) 106L;
    /**
     * {@snippet lang=c :
     * #define ELAST 106
     * }
     */
    public static int ELAST() {
        return ELAST;
    }
    /**
     * {@snippet lang=c :
     * typedef int errno_t
     * }
     */
    public static final OfInt errno_t = errno_h.C_INT;

    private static class __error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(errno_h.C_POINTER);

        public static final MemorySegment ADDR = errno_h.findOrThrow("__error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static FunctionDescriptor __error$descriptor() {
        return __error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MethodHandle __error$handle() {
        return __error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MemorySegment __error$address() {
        return __error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MemorySegment __error() {
        var mh$ = __error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__error");
            }
            return (MemorySegment) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN = errno_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }

    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }

    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }

    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }

    private static final int EWOULDBLOCK = (int) 35L;
    /**
     * {@snippet lang=c :
     * #define EWOULDBLOCK 35
     * }
     */
    public static int EWOULDBLOCK() {
        return EWOULDBLOCK;
    }
}
