/*
 * Copyright (C) 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.bmarwell.jtop.lib.osx.ffm; // Generated by jextract

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfLong;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang=c :
 * struct loadavg {
 *     fixpt_t ldavg[3];
 *     long fscale;
 * }
 * }
 */
public class loadavg {

    loadavg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    MemoryLayout.sequenceLayout(3, sysctl_h.C_INT).withName("ldavg"),
                    MemoryLayout.paddingLayout(4),
                    sysctl_h.C_LONG.withName("fscale"))
            .withName("loadavg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout ldavg$LAYOUT = (SequenceLayout) $LAYOUT.select(groupElement("ldavg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static final SequenceLayout ldavg$layout() {
        return ldavg$LAYOUT;
    }

    private static final long ldavg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static final long ldavg$offset() {
        return ldavg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static MemorySegment ldavg(MemorySegment struct) {
        return struct.asSlice(ldavg$OFFSET, ldavg$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static void ldavg(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ldavg$OFFSET, ldavg$LAYOUT.byteSize());
    }

    private static long[] ldavg$DIMS = {3};

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static long[] ldavg$dimensions() {
        return ldavg$DIMS;
    }

    private static final VarHandle ldavg$ELEM_HANDLE = ldavg$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static int ldavg(MemorySegment struct, long index0) {
        return (int) ldavg$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * fixpt_t ldavg[3]
     * }
     */
    public static void ldavg(MemorySegment struct, long index0, int fieldValue) {
        ldavg$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong fscale$LAYOUT = (OfLong) $LAYOUT.select(groupElement("fscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long fscale
     * }
     */
    public static final OfLong fscale$layout() {
        return fscale$LAYOUT;
    }

    private static final long fscale$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long fscale
     * }
     */
    public static final long fscale$offset() {
        return fscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long fscale
     * }
     */
    public static long fscale(MemorySegment struct) {
        return struct.get(fscale$LAYOUT, fscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long fscale
     * }
     */
    public static void fscale(MemorySegment struct, long fieldValue) {
        struct.set(fscale$LAYOUT, fscale$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(
            MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
