/*
 * Copyright (C) 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.bmarwell.jtop.lib.osx.ffm; // Generated by jextract

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang=c :
 * struct proc_bsdshortinfo {
 *     uint32_t pbsi_pid;
 *     uint32_t pbsi_ppid;
 *     uint32_t pbsi_pgid;
 *     uint32_t pbsi_status;
 *     char pbsi_comm[16];
 *     uint32_t pbsi_flags;
 *     uid_t pbsi_uid;
 *     gid_t pbsi_gid;
 *     uid_t pbsi_ruid;
 *     gid_t pbsi_rgid;
 *     uid_t pbsi_svuid;
 *     gid_t pbsi_svgid;
 *     uint32_t pbsi_rfu;
 * }
 * }
 */
public class proc_bsdshortinfo {

    proc_bsdshortinfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    proc_info_h.C_INT.withName("pbsi_pid"),
                    proc_info_h.C_INT.withName("pbsi_ppid"),
                    proc_info_h.C_INT.withName("pbsi_pgid"),
                    proc_info_h.C_INT.withName("pbsi_status"),
                    MemoryLayout.sequenceLayout(16, proc_info_h.C_CHAR).withName("pbsi_comm"),
                    proc_info_h.C_INT.withName("pbsi_flags"),
                    proc_info_h.C_INT.withName("pbsi_uid"),
                    proc_info_h.C_INT.withName("pbsi_gid"),
                    proc_info_h.C_INT.withName("pbsi_ruid"),
                    proc_info_h.C_INT.withName("pbsi_rgid"),
                    proc_info_h.C_INT.withName("pbsi_svuid"),
                    proc_info_h.C_INT.withName("pbsi_svgid"),
                    proc_info_h.C_INT.withName("pbsi_rfu"))
            .withName("proc_bsdshortinfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt pbsi_pid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_pid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pid
     * }
     */
    public static final OfInt pbsi_pid$layout() {
        return pbsi_pid$LAYOUT;
    }

    private static final long pbsi_pid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pid
     * }
     */
    public static final long pbsi_pid$offset() {
        return pbsi_pid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pid
     * }
     */
    public static int pbsi_pid(MemorySegment struct) {
        return struct.get(pbsi_pid$LAYOUT, pbsi_pid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pid
     * }
     */
    public static void pbsi_pid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_pid$LAYOUT, pbsi_pid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_ppid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_ppid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_ppid
     * }
     */
    public static final OfInt pbsi_ppid$layout() {
        return pbsi_ppid$LAYOUT;
    }

    private static final long pbsi_ppid$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_ppid
     * }
     */
    public static final long pbsi_ppid$offset() {
        return pbsi_ppid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_ppid
     * }
     */
    public static int pbsi_ppid(MemorySegment struct) {
        return struct.get(pbsi_ppid$LAYOUT, pbsi_ppid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_ppid
     * }
     */
    public static void pbsi_ppid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_ppid$LAYOUT, pbsi_ppid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_pgid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_pgid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pgid
     * }
     */
    public static final OfInt pbsi_pgid$layout() {
        return pbsi_pgid$LAYOUT;
    }

    private static final long pbsi_pgid$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pgid
     * }
     */
    public static final long pbsi_pgid$offset() {
        return pbsi_pgid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pgid
     * }
     */
    public static int pbsi_pgid(MemorySegment struct) {
        return struct.get(pbsi_pgid$LAYOUT, pbsi_pgid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_pgid
     * }
     */
    public static void pbsi_pgid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_pgid$LAYOUT, pbsi_pgid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_status$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_status
     * }
     */
    public static final OfInt pbsi_status$layout() {
        return pbsi_status$LAYOUT;
    }

    private static final long pbsi_status$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_status
     * }
     */
    public static final long pbsi_status$offset() {
        return pbsi_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_status
     * }
     */
    public static int pbsi_status(MemorySegment struct) {
        return struct.get(pbsi_status$LAYOUT, pbsi_status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_status
     * }
     */
    public static void pbsi_status(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_status$LAYOUT, pbsi_status$OFFSET, fieldValue);
    }

    private static final SequenceLayout pbsi_comm$LAYOUT = (SequenceLayout) $LAYOUT.select(groupElement("pbsi_comm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static final SequenceLayout pbsi_comm$layout() {
        return pbsi_comm$LAYOUT;
    }

    private static final long pbsi_comm$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static final long pbsi_comm$offset() {
        return pbsi_comm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static MemorySegment pbsi_comm(MemorySegment struct) {
        return struct.asSlice(pbsi_comm$OFFSET, pbsi_comm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static void pbsi_comm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pbsi_comm$OFFSET, pbsi_comm$LAYOUT.byteSize());
    }

    private static long[] pbsi_comm$DIMS = {16};

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static long[] pbsi_comm$dimensions() {
        return pbsi_comm$DIMS;
    }

    private static final VarHandle pbsi_comm$ELEM_HANDLE = pbsi_comm$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static byte pbsi_comm(MemorySegment struct, long index0) {
        return (byte) pbsi_comm$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char pbsi_comm[16]
     * }
     */
    public static void pbsi_comm(MemorySegment struct, long index0, byte fieldValue) {
        pbsi_comm$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt pbsi_flags$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_flags
     * }
     */
    public static final OfInt pbsi_flags$layout() {
        return pbsi_flags$LAYOUT;
    }

    private static final long pbsi_flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_flags
     * }
     */
    public static final long pbsi_flags$offset() {
        return pbsi_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_flags
     * }
     */
    public static int pbsi_flags(MemorySegment struct) {
        return struct.get(pbsi_flags$LAYOUT, pbsi_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_flags
     * }
     */
    public static void pbsi_flags(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_flags$LAYOUT, pbsi_flags$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_uid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_uid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uid_t pbsi_uid
     * }
     */
    public static final OfInt pbsi_uid$layout() {
        return pbsi_uid$LAYOUT;
    }

    private static final long pbsi_uid$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uid_t pbsi_uid
     * }
     */
    public static final long pbsi_uid$offset() {
        return pbsi_uid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uid_t pbsi_uid
     * }
     */
    public static int pbsi_uid(MemorySegment struct) {
        return struct.get(pbsi_uid$LAYOUT, pbsi_uid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uid_t pbsi_uid
     * }
     */
    public static void pbsi_uid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_uid$LAYOUT, pbsi_uid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_gid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_gid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gid_t pbsi_gid
     * }
     */
    public static final OfInt pbsi_gid$layout() {
        return pbsi_gid$LAYOUT;
    }

    private static final long pbsi_gid$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gid_t pbsi_gid
     * }
     */
    public static final long pbsi_gid$offset() {
        return pbsi_gid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gid_t pbsi_gid
     * }
     */
    public static int pbsi_gid(MemorySegment struct) {
        return struct.get(pbsi_gid$LAYOUT, pbsi_gid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gid_t pbsi_gid
     * }
     */
    public static void pbsi_gid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_gid$LAYOUT, pbsi_gid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_ruid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_ruid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uid_t pbsi_ruid
     * }
     */
    public static final OfInt pbsi_ruid$layout() {
        return pbsi_ruid$LAYOUT;
    }

    private static final long pbsi_ruid$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uid_t pbsi_ruid
     * }
     */
    public static final long pbsi_ruid$offset() {
        return pbsi_ruid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uid_t pbsi_ruid
     * }
     */
    public static int pbsi_ruid(MemorySegment struct) {
        return struct.get(pbsi_ruid$LAYOUT, pbsi_ruid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uid_t pbsi_ruid
     * }
     */
    public static void pbsi_ruid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_ruid$LAYOUT, pbsi_ruid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_rgid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_rgid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gid_t pbsi_rgid
     * }
     */
    public static final OfInt pbsi_rgid$layout() {
        return pbsi_rgid$LAYOUT;
    }

    private static final long pbsi_rgid$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gid_t pbsi_rgid
     * }
     */
    public static final long pbsi_rgid$offset() {
        return pbsi_rgid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gid_t pbsi_rgid
     * }
     */
    public static int pbsi_rgid(MemorySegment struct) {
        return struct.get(pbsi_rgid$LAYOUT, pbsi_rgid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gid_t pbsi_rgid
     * }
     */
    public static void pbsi_rgid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_rgid$LAYOUT, pbsi_rgid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_svuid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_svuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uid_t pbsi_svuid
     * }
     */
    public static final OfInt pbsi_svuid$layout() {
        return pbsi_svuid$LAYOUT;
    }

    private static final long pbsi_svuid$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uid_t pbsi_svuid
     * }
     */
    public static final long pbsi_svuid$offset() {
        return pbsi_svuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uid_t pbsi_svuid
     * }
     */
    public static int pbsi_svuid(MemorySegment struct) {
        return struct.get(pbsi_svuid$LAYOUT, pbsi_svuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uid_t pbsi_svuid
     * }
     */
    public static void pbsi_svuid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_svuid$LAYOUT, pbsi_svuid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_svgid$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_svgid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gid_t pbsi_svgid
     * }
     */
    public static final OfInt pbsi_svgid$layout() {
        return pbsi_svgid$LAYOUT;
    }

    private static final long pbsi_svgid$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gid_t pbsi_svgid
     * }
     */
    public static final long pbsi_svgid$offset() {
        return pbsi_svgid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gid_t pbsi_svgid
     * }
     */
    public static int pbsi_svgid(MemorySegment struct) {
        return struct.get(pbsi_svgid$LAYOUT, pbsi_svgid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gid_t pbsi_svgid
     * }
     */
    public static void pbsi_svgid(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_svgid$LAYOUT, pbsi_svgid$OFFSET, fieldValue);
    }

    private static final OfInt pbsi_rfu$LAYOUT = (OfInt) $LAYOUT.select(groupElement("pbsi_rfu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pbsi_rfu
     * }
     */
    public static final OfInt pbsi_rfu$layout() {
        return pbsi_rfu$LAYOUT;
    }

    private static final long pbsi_rfu$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pbsi_rfu
     * }
     */
    public static final long pbsi_rfu$offset() {
        return pbsi_rfu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_rfu
     * }
     */
    public static int pbsi_rfu(MemorySegment struct) {
        return struct.get(pbsi_rfu$LAYOUT, pbsi_rfu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pbsi_rfu
     * }
     */
    public static void pbsi_rfu(MemorySegment struct, int fieldValue) {
        struct.set(pbsi_rfu$LAYOUT, pbsi_rfu$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(
            MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
